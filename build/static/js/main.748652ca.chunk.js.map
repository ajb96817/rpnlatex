{"version":3,"sources":["Keymap.js","Models.js","Actions.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EditorKeymap","base","\"","files","keymap","help","stack","config","config_math_alignment","config_stack","config_theme","config_zoom","accumulate","delimiters","custom_delimiters","operator","hyperbolic","inverse","inverse_hyperbolic","squared","squared_hyperbolic","integral_limits","derivative","infix","relational","symbol","decoration","color","array","editor","script","calligraphic","lowercase_greek","uppercase_greek","Keymap","this","bindings","KeybindingTable","mode","key","mode_map","test","Settings","current_keymap","selected_theme","last_opened_filename","popup_mode","layout","default_layout","zoom_factor","stack_rightalign_math","document_rightalign_math","stack_side","stack_split","stack_panel_elt","document_panel_elt","popup_panel_elt","style","display","root_elt","document","getElementById","percentage","Math","round","pow","fontSize","_split_rectangle","x","y","w","h","stack_bounds","document_bounds","_apply_bounds","bounds","side","split_percent","w1","w2","h1","h2","elt","left","top","width","height","serialized_string","JSON","stringify","to_json","localStorage","setItem","json","saved_keys","forEach","getItem","from_json","parse","s","LatexEmitter","tokens","last_token_type","text","token_type","length","push","expr","emit_latex","force_braces","grouped","fn","old_tokens","old_last_token_type","join","emit_token","last_token","_is_latex_identifier_char","charAt","ch","command_name","command_options","startsWith","command","slice","envname","AppState","_default_stack","Document","is_dirty","item","MarkdownItem","Stack","app_state","format","UndoStack","state_stack","max_stack_depth","undo_count","initial_app_state","state","same_as","DocumentStorage","open_request","database","onsuccess","indexedDB","on_open_success","open","onupgradeneeded","handle_upgrade_database","bind","handle_open_success","onerror","handle_open_error","event","result","oldVersion","build_initial_schema","createObjectStore","keyPath","onversionchange","close","alert","readwrite","transaction","filename","replaceAll","trim","request","create_transaction","objectStore","get","serialized_json","metadata_json","filesize","description","stack_item_count","depth","document_item_count","items","timestamp","Date","put","oncomplete","onabort","delete","getAll","row","ts_value","onrowfetched","onfinished","cursor","openCursor","c","target","value","continue","ImportExportState","document_storage","import_count","failed_count","error_message","download_url","import_result_string","file_list_needs_update","onstatechange","date","getFullYear","toString","toLocaleString","month","toLowerCase","getDate","padStart","new_state","zip","JSZip","fetch_all_documents","add_document_json_to_zip","start_compressing","change_state","file","generateAsync","type","then","content_blob","finished_compressing","URL","revokeObjectURL","clear_download_url","createObjectURL","zipfile","reader","FileReader","addEventListener","process_uploaded_data","readAsArrayBuffer","data","loadAsync","promises","endsWith","async","content","import_file","name","Promise","all","parsed","e","save_state","FileManagerState","file_list","selected_filename","current_filename","unavailable","field","ascending","sort","a","b","a_value","b_value","basename","replace","n","candidate","some","offset","new_filename","f","index","new_index","Expr","emitter","finished_string","expr_type","json_keys","json_key","obj","undefined","map","to_latex","found","visit","old_expr","new_expr","CommandExpr","_list","operand_exprs","options","PrefixExpr","_expr","base_expr","prefix_expr","InfixExpr","operator_expr","left_expr","right_expr","DeferExpr","TextExpr","SequenceExpr","exprs","DelimiterExpr","left_type","right_type","middle_type","inner_exprs","SubscriptSuperscriptExpr","subscript_expr","superscript_expr","ArrayExpr","array_type","row_count","column_count","_list2d","element_exprs","AccumulatorExpr","accumulator_type","json_array","expr_json","row_exprs","right","concat","combine_command_pair","left_name","right_name","new_command_name","indexOf","operand_expr","grouped_expr","substitute_expr","op_expr","operand_count","op","operator_text","text_or_command","needs_autoparenthesization","parenthesize","t","make_cell","new_element_exprs","inserted_row_exprs","i","splice","_transpose_cell","cell_expr","begin_environment","row_index","row_separator","col_index","align_separator","end_environment","split_mode","_split_expr","alpha_regex","_latex_escape","replacements","match","_to_display_expr","is_empty","Item","serial","next_serial","prefix","serial_number","item_type","ExprItem","tag_expr","source_text","string","latex","to_text","rendered_html","render_markdown","marked","check","underflow","_unchecked_pop","check_exprs","type_error","new_stack","pop_exprs","parseInt","every","is_matrix","Error","push_all","push_all_exprs","object_type","item_json","selection_index","new_item","selected_item","delete_selection","move_selection_by","insert_item","InputContext","app_component","settings","new_mode","new_document","files_changed","file_saved","notification_text","perform_undo_or_redo","minieditor","active","peek","effective_mode","lookup_binding","last_keypress","process_command","commands","split","piece","token","process_command_batch","parameters","handler_function","new_app_state","message","error_flash_stack","dom_element","classList","remove","offsetWidth","add","error_flash_element","elt_ids","elt_id","child_expr","is_superscript","autoparenthesize","_build_subscript_superscript","push_expr","make_subscript_superscript","new_prime_expr","new_superscript_expr","is_prime_command","switch_to_mode","pop","pop_positive_integer","item_count","new_stack_2","reverse","amount_string","amount","shift_selection_by","error_flash_document","file_manager_state","do_save_file_as","notify","save","request_file_list","window","prompt","sanitize_filename","do_save_file","start_loading_filename","generate_unused_filename","do_toggle_popup","offset_string","find_adjacent_filename","confirm","delete_state","arg","do_insert_markdown","do_edit_stack_top","inserted_text","edited_item","_insert_text_into_minieditor","editor_elt","ref","current","setRangeText","selectionStart","selectionEnd","focus","execCommand","old_item","from_string","do_insert","case_type","convert_fn","toUpperCase","opname","arity_string","arity","popped_exprs","result_expr","funcname","superscript_text","arg_expr","orig_funcname","hat_op","inner_expr","colorname","accumulate_type","delimiter_type","middle","_finish_custom_delimiters","d","overset_op","infix_expr","stacked_expr","new_op_expr","concat_mode","left_item","right_item","combine_pair","new_text","original_expr","substitution_expr","defer_expr","find_defer","is_valid_character","with_extra_character","do_finish_text_input","without_last_character","textstyle","finished_expr","expr_count_string","expr_count","arg_count_string","arg_count","command_expr","mode_string","scrollTop","help_scroll_top","apply_layout_to_dom","config_option","clear_all_flashes","matrix_type","matrix_expr","pop_matrices","m1","m2","new_array","array_expr","split_rows","dissolved_exprs","with_ellipses","transposed","align_type","split_elements","separator_text","final_separator_text","infix_operator_expr","new_stack_3","tagged_item","tag_item","clipboard_item","screen_percentage_string","screen_percentage","container","selected_elts","getElementsByClassName","selected_elt","top_scrolltop","offsetTop","bottom_scrolltop","offsetHeight","clientHeight","ratio","new_scrolltop","percentage_string","panel_elt","exported_text","navigator","clipboard","writeText","$e","React","createElement","App","props","load_from_local_storage","import_export_state","input_context","undo_stack","clear","import_export_state_changed","handleKeyDown","handleBeforeUnload","handleVisibilityChange","open_database","on_open_database","setState","fetch_file_list","file_list_request_finished","file_list_request_error","sort_file_list","load_state","file_load_finished","file_load_error","error","stack_panel_ref","document_panel_ref","popup_panel_ref","removeEventListener","createRef","id","className","ModeIndicatorComponent","StackItemsComponent","DocumentComponent","PopupPanelComponent","altKey","metaKey","_keyname_from_event","handle_key","was_handled","preventDefault","scratch","manage_undo_state","state_updates","shiftKey","ctrlKey","undo_state","redo_state","push_state","Component","indicator_item","colon","minieditor_active","minieditor_index","item_components","MiniEditorComponent","textarea_ref","ItemComponent","selected","item_ref","react_key","class_names","subcomponents","is_selected","selected_item_ref","top_is_selected","top_spacer","ensure_selection_visible","extra_space","onInput","handleOnInput","spellCheck","textarea","initial_text","FileManagerComponent","show_import_export","file_input_ref","render_file_table","render_shortcuts","render_export_import_section","textual_state","href","onClick","start_exporting","download_available","export_filename","generate_download_filename","download","handle_file_upload","fontWeight","colSpan","_render_file_list_row","floor","toLocaleDateString","toLocaleTimeString","keyhelp_elements","spec","keyname","helptext","file_input_elt","start_importing","tag_ref","dangerouslySetInnerHTML","__html","node","_render_with_katex","children","getElementsByTagName","codespan","latex_code","textContent","display_mode","katex","render","throwOnError","displayMode","fleqn","trust","msg","innerHTML","refs","help_content","subcomponent","KeymapTableComponent","help_source_elt","help_dest_elt","_render_help_latex","parentNode","removeChild","appendChild","help_elt","code_elt","render_rows","sections","get_sorted_mode_names","rows_for_mode","modes","Object","keys","entries","row_for_mode_and_key","command_elt","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","process","origin","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"6RAipBeA,EAhpBM,CACjBC,KAAM,CAEF,UAAW,cACX,IAAK,mCACL,IAAK,aACL,IAAK,WACL,IAAK,cACL,IAAK,WACL,IAAK,eAGL,SAAU,qBACV,SAAU,wBACV,SAAU,uBACV,SAAU,uBACV,SAAU,uBACV,SAAU,OACV,SAAU,oBACV,SAAU,qDACV,SAAU,kBACV,SAAU,wBACV,SAAU,YACV,SAAU,uBACV,SAAU,WACV,SAAU,2DACV,SAAU,iBACV,SAAU,YACV,SAAU,cACV,SAAU,uBACV,SAAU,OACV,SAAU,OACV,SAAU,YACV,SAAU,UAGV,cAAe,iBACf,IAAK,0BACL,IAAK,kBACL,IAAK,+BACL,IAAK,wBACL,IAAK,wBACL,IAAK,sBACL,IAAK,iBACL,IAAK,iBACL,IAAK,qBAGL,QAAW,+BACX,gBAAiB,8BACjB,UAAa,+BACb,kBAAmB,8BACnB,OAAU,+BACV,SAAY,+BACZ,KAAQ,mCACR,IAAO,mCAGP,IAAO,aACP,MAAS,YACT,UAAa,MACb,IAAK,cACL,IAAK,cACL,IAAK,kBACL,IAAK,aACL,IAAK,kBACL,IAAK,mBACL,IAAK,uBACL,IAAK,uBACL,IAAK,oBACL,IAAK,cACL,IAAK,gBACL,EAAK,kBACL,KAAM,mBACN,IAAK,aACL,EAAK,cACL,IAAK,oBACLC,IAAM,iBAGVC,MAAO,CACH,QAAW,qBAEX,EAAK,uBACL,EAAK,iBACL,MAAS,qBACT,EAAK,YACL,EAAK,eACL,QAAW,0BACX,UAAa,0BAGjBC,OAAQ,CACJ,QAAW,yBACX,UAAa,wBACb,QAAW,uBAGfC,KAAM,CACF,QAAW,yBACX,UAAa,wBACb,QAAW,qBAIfC,MAAO,CACH,EAAK,oBACL,EAAK,MACL,EAAK,kBACL,EAAK,mBACL,EAAK,wBACL,EAAK,uBACL,EAAK,uBACL,EAAK,MACL,EAAK,OACL,EAAK,uBACL,EAAK,MACL,EAAK,OACL,EAAK,QACL,EAAK,YACL,EAAK,cACL,EAAK,OACL,EAAK,cACL,MAAS,MACT,IAAO,OACP,IAAK,OACL,IAAK,MACL,IAAK,0BACL,IAAK,2BAGL,EAAK,qBACL,EAAK,uBAITC,OAAQ,CAGJ,EAAK,6BACL,EAAK,sBACL,EAAK,oBACL,EAAK,oBACL,EAAK,mBAEL,EAAK,cAGTC,sBAAuB,CACnB,EAAK,oCACL,EAAK,kCAGTC,aAAc,CACV,EAAK,uBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,IAAK,yBAEL,UAAa,yBACb,WAAc,0BACd,QAAW,wBACX,UAAa,4BAGjBC,aAAc,CACV,EAAK,uBACL,EAAK,oBACL,EAAK,oBACL,EAAK,qBAGTC,YAAa,CACT,EAAK,uBACL,IAAK,uBACL,IAAK,wBAITC,WAAY,CACR,MAAS,oBACT,cAAe,0BACf,OAAU,MACV,UAAa,uBACb,QAAW,qBAIfC,WAAY,CACR,EAAK,6BACL,EAAK,6BACL,EAAK,+BACL,EAAK,+BACL,EAAK,wCACL,EAAK,wCACL,EAAK,6BACL,EAAK,uCACL,EAAK,6BACL,EAAK,6BACL,EAAK,sBACL,EAAK,sBACL,IAAK,2BACL,IAAK,+BACL,IAAK,iBACL,IAAK,iBACL,IAAK,+EACL,IAAK,sBAITC,kBAAmB,CACf,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,2BACL,EAAK,4BACL,EAAK,4BACL,EAAK,4BACL,EAAK,4BACL,EAAK,gCACL,EAAK,gCACL,EAAK,0BACL,IAAK,4BACL,IAAK,4BACL,IAAK,qBACL,IAAK,qBACL,IAAK,qBACL,IAAK,qBACL,IAAK,uBACL,IAAK,uBACL,IAAK,qBACL,IAAK,qBACL,KAAM,+BACN,IAAK,sBAITC,SAAU,CACN,EAAK,gDACL,EAAK,eACL,EAAK,mBACL,EAAK,mBACL,EAAK,mBACL,EAAK,qBACL,EAAK,qBACL,EAAK,kBACL,EAAK,qBACL,EAAK,qDACL,EAAK,qBACL,EAAK,qBACL,EAAK,wBACL,EAAK,wBACL,EAAK,kBACL,EAAK,uBACL,EAAK,mEACL,EAAK,qBACL,EAAK,qBACL,EAAK,oBACL,EAAK,qBACL,EAAK,6CACL,EAAK,sDACL,EAAK,2BACL,EAAK,iBACL,EAAK,gBACL,EAAK,mBACL,EAAK,qBACL,EAAK,qBACL,EAAK,qBACL,EAAK,qBACL,EAAK,mEACL,EAAK,mEACL,EAAK,qEACL,EAAK,sGACL,IAAK,YACL,IAAK,kBACL,KAAM,mBACN,IAAK,0DACL,IAAK,0DACL,IAAK,eACL,IAAK,mBACL,MAAS,wDAIbC,WAAY,CACR,EAAK,sBACL,EAAK,sBACL,EAAK,sBACL,EAAK,sBACL,EAAK,sBACL,EAAK,uBAETC,QAAS,CACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,2BAETC,mBAAoB,CAChB,EAAK,yBACL,EAAK,yBACL,EAAK,yBACL,EAAK,yBACL,EAAK,yBACL,EAAK,0BAETC,QAAS,CACL,EAAK,uBACL,EAAK,uBACL,EAAK,uBACL,EAAK,uBACL,EAAK,uBACL,EAAK,uBACL,EAAK,2BAETC,mBAAoB,CAChB,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,wBACL,EAAK,yBAITC,gBAAiB,CACb,EAAK,wEACL,EAAK,sEACL,EAAK,qEACL,EAAK,2DACL,EAAK,4DACL,EAAK,+DACL,EAAK,uEAITC,WAAY,CAER,EAAK,sGAEL,EAAK,iJAEL,EAAK,iFAEL,EAAK,8HAEL,EAAK,oFAEL,EAAK,gIAEL,EAAK,+DAEL,EAAK,2GAEL,EAAK,2KAEL,EAAK,8LAEL,EAAK,2CAEL,EAAK,kEAEL,EAAK,6DAEL,EAAK,kEAITC,MAAO,CACH,EAAK,cACL,EAAK,iBACL,EAAK,cACL,EAAK,mBACL,EAAK,eACL,EAAK,6EACL,EAAK,mBACL,EAAK,iBACL,EAAK,aACL,EAAK,eACL,EAAK,mBACL,EAAK,eACL,EAAK,aACL,EAAK,kCACL,EAAK,iCACL,EAAK,YACL,EAAK,aACL,EAAK,cACL,EAAK,oBACL,EAAK,cACL,EAAK,gBACL,EAAK,gBACL,EAAK,iBACL,IAAK,mBACL,IAAK,mBACL,IAAK,0BACL,IAAK,qBACL,IAAK,iBACL,IAAK,gBACL,IAAK,eACL,IAAK,UACL,IAAK,aACL,IAAK,UACL,IAAK,qBACL,IAAK,eACL,IAAK,UACL,KAAM,qBACN,IAAK,UACL,IAAK,iBAITC,WAAY,CACR,EAAK,iBACL,EAAK,eACL,EAAK,gBACL,EAAK,cACL,EAAK,UACL,EAAK,aACL,EAAK,aACL,EAAK,gBACL,EAAK,UACL,EAAK,aACL,EAAK,aACL,EAAK,iBACL,EAAK,UACL,EAAK,mBACL,EAAK,iBACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,aACL,IAAK,aACL,IAAK,mBACL,IAAK,cACL,IAAK,iBAITC,OAAQ,CACJ,EAAK,sBACL,EAAK,YACL,EAAK,sDACL,EAAK,6CACL,EAAK,iBACL,EAAK,kBACL,EAAK,gBACL,EAAK,kBACL,EAAK,mBACL,EAAK,kBACL,EAAK,kBACL,EAAK,eACL,EAAK,gBACL,EAAK,eACL,EAAK,cACL,EAAK,gBACL,EAAK,gBACL,EAAK,cACL,EAAK,WACL,EAAK,eACL,EAAK,oBACL,EAAK,oBACL,EAAK,kBACL,EAAK,eACL,EAAK,iBACL,EAAK,gBACL,EAAK,iBACL,IAAK,gBACL,IAAK,iBACL,IAAK,WACL,IAAK,WACL,IAAK,gBACL,IAAK,WACL,IAAK,sBACL,IAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,mBACL,IAAK,WACL,IAAK,WACL,IAAK,eACL,IAAK,UACL,QAAW,mBACX,UAAa,sBAIjBC,WAAY,CACR,EAAK,wBACL,EAAK,0BACL,EAAK,kBACL,EAAK,aACL,EAAK,8BACL,EAAK,+BACL,EAAK,gBACL,EAAK,qBACL,EAAK,mBACL,EAAK,oBACL,EAAK,gBACL,EAAK,oBACL,EAAK,oBACL,EAAK,8BACL,EAAK,kBACL,EAAK,cACL,EAAK,eACL,EAAK,oBACL,EAAK,0BACL,EAAK,cACL,EAAK,kBACL,EAAK,kBACL,EAAK,cACL,EAAK,qBACL,EAAK,kBACL,EAAK,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","file":"static/js/main.748652ca.chunk.js","sourcesContent":["\nconst EditorKeymap = {\n    base: {\n        // Self-insert keys\n        '[alnum]': \"self_insert\",\n        '!': \"autoparenthesize;insert !;concat\",\n        '#': \"insert \\\\#\",\n        '@': \"insert @\",\n        '^': \"superscript\",\n        '*': \"insert *\",\n        '~': \"insert \\\\sim\",\n\n        // Other Ctrl-based shortcuts\n        'Ctrl+0': \"insert 0;subscript\",\n        'Ctrl+1': \"insert -1;superscript\",\n        'Ctrl+2': \"insert 2;superscript\",\n        'Ctrl+3': \"insert 3;superscript\",\n        'Ctrl+4': \"insert 4;superscript\",\n        'Ctrl+a': \"swap\",\n        'Ctrl+c': \"copy_to_clipboard\",\n        'Ctrl+e': \"name exp;insert e;operator mathrm;swap;superscript\",  // exp(x) - same as [/] [e]\n        'Ctrl+i': \"pop_to_document\",\n        'Ctrl+j': \"extract_from_document\",\n        'Ctrl+k': \"infix \\\\,\",\n        'Ctrl+l': \"recenter_document 50\",\n        'Ctrl+m': \"prefix -\",\n        'Ctrl+o': \"name apply_fn;operator mathopen;swap;parenthesize;concat\",  // same as [/] [o]\n        'Ctrl+p': \"delimiters ( )\",\n        'Ctrl+s': \"save_file\",\n        'Ctrl+u': \"superscript\",\n        'Ctrl+v': \"paste_from_clipboard\",\n        'Ctrl+y': \"redo\",\n        'Ctrl+z': \"undo\",\n        'Ctrl+ ': \"infix \\\\,\",\n        'Ctrl+,': \"infix ,\",\n\n        // Immediate action special keys\n        'Shift+Enter': \"edit_stack_top\",\n        ' ': \"concat autoparenthesize\",\n        '=': \"mode relational\",\n        '<': \"delimiters \\\\langle \\\\rangle\",\n        '+': \"infix_plus_or_minus +\",\n        '-': \"infix_plus_or_minus -\",\n        ']': \"operator boldsymbol\",\n        '[': \"delimiters [ ]\",\n        '(': \"delimiters ( )\",\n        '{': \"delimiters \\\\{ \\\\}\",\n\n        // Document commands\n        'ArrowUp': \"change_document_selection -1\",\n        'Shift+ArrowUp': \"shift_document_selection -1\",\n        'ArrowDown': \"change_document_selection +1\",\n        'Shift+ArrowDown': \"shift_document_selection +1\",\n        'PageUp': \"change_document_selection -5\",  // TODO: scroll based on viewport height instead\n        'PageDown': \"change_document_selection +5\",\n        'Home': \"change_document_selection -10000\",\n        'End': \"change_document_selection +10000\",\n\n        // Prefix keys\n        'Tab': \"mode stack\",\n        'Enter': \"subscript\",\n        'Backspace': \"pop\",\n        \"`\": \"superscript\",\n        \"'\": \"mode symbol\",\n        '.': \"mode decoration\",\n        ',': \"mode infix\",\n        ')': \"mode delimiters\",\n        '}': \"custom_delimiter\",\n        ';': \"mode lowercase_greek\",\n        ':': \"mode uppercase_greek\",\n        '%': \"mode calligraphic\",\n        '&': \"mode script\",\n        '/': \"mode operator\",\n        '_': \"accumulate text\",\n        \"\\\\\": \"accumulate latex\",\n        '|': \"mode array\",\n        '$': \"mode config\",\n        '?': \"toggle_popup help\",\n        \"\\\"\": \"edit_new_item\"\n    },\n\n    files: {\n        'default': \"toggle_popup files\",\n        \n        'd': \"delete_selected_file\",\n        'n': \"start_new_file\",\n        'Enter': \"load_selected_file\",\n        's': \"save_file\",\n        'S': \"save_file_as\",\n        'ArrowUp': \"select_adjacent_file -1\",\n        'ArrowDown': \"select_adjacent_file 1\"\n    },\n\n    keymap: {\n        'ArrowUp': 'scroll_popup_panel -25',\n        'ArrowDown': 'scroll_popup_panel 25',\n        'default': \"toggle_popup keymap\"\n    },\n\n    help: {\n        'ArrowUp': 'scroll_popup_panel -40',\n        'ArrowDown': 'scroll_popup_panel 40',\n        'default': \"toggle_popup help\"\n    },\n\n    // Tab prefix: stack/misc operations\n    stack: {\n        'c': \"copy_to_clipboard\",\n        'd': \"pop\",\n        'i': \"pop_to_document\",\n        'I': \"copy_to_document\",\n        'j': \"extract_from_document\",\n        'J': \"recall_from_document\",\n        'l': \"recenter_document 50\",\n        'n': \"nip\",\n        'o': \"over\",\n        'p': \"paste_from_clipboard\",\n        'r': \"rot\",\n        't': \"tuck\",\n        'u': \"unrot\",\n        'v': \"reverse_n\",\n        'V': \"reverse_all\",\n        'w': \"swap\",\n        'X': \"clear_stack\",\n        'Enter': \"dup\",\n        'Tab': \"undo\",\n        '.': \"redo\",\n        ' ': \"dup\",\n        '!': \"export_document_as_text\",\n        '@': \"export_stack_top_as_text\",\n\n        // temporary\n        'f': \"toggle_popup files\",\n        'k': \"toggle_popup keymap\"\n    },\n\n    // $ prefix: configuration\n    config: {\n        // 'a': \"mode config_aux\",\n        // 'c': \"config alternate_layout\",\n        'm': \"mode config_math_alignment\",\n        'r': \"config reset_layout\",\n        's': \"mode config_stack\",\n        't': \"mode config_theme\",\n        'z': \"mode config_zoom\",\n\n        '$': \"insert \\\\$\"\n    },\n    // $m\n    config_math_alignment: {\n        'd': \"config math_align toggle_document\",\n        's': \"config math_align toggle_stack\"\n    },\n    // $s\n    config_stack: {\n        '0': \"config stack_split 0\",\n        '1': \"config stack_split 10\",\n        '2': \"config stack_split 20\",\n        '3': \"config stack_split 30\",\n        '4': \"config stack_split 40\",\n        '5': \"config stack_split 50\",\n        '6': \"config stack_split 60\",\n        '7': \"config stack_split 70\",\n        '8': \"config stack_split 80\",\n        '9': \"config stack_split 90\",\n        '*': \"config stack_split 100\",\n\n        'ArrowLeft': \"config stack_side left\",\n        'ArrowRight': \"config stack_side right\",\n        'ArrowUp': \"config stack_side top\",\n        'ArrowDown': \"config stack_side bottom\"\n    },\n    // $t\n    config_theme: {\n        '0': \"config theme default\",\n        '1': \"config theme dawn\",\n        '2': \"config theme dusk\",\n        '3': \"config theme dark\"\n    },\n    // $z\n    config_zoom: {\n        '0': \"config zoom_factor 0\",\n        '+': \"config zoom_factor +\",\n        '-': \"config zoom_factor -\"\n    },\n\n    // \" and \\ prefixes (text/latex accumulator)\n    accumulate: {\n        'Enter': \"finish_text_input\",\n        'Shift+Enter': \"finish_text_input roman\",\n        'Escape': \"pop\",  // (cancel text input)\n        'Backspace': \"backspace_text_input\",\n        'default': \"append_text_input\"\n    },\n\n    // right-bracket prefix: special delimiters\n    delimiters: {\n        'b': \"delimiters \\\\langle \\\\vert\",  //  <x| Dirac bra\n        'c': \"delimiters \\\\lceil \\\\rceil\",\n        'f': \"delimiters \\\\lfloor \\\\rfloor\",\n        'g': \"delimiters \\\\lgroup \\\\rgroup\",\n        'i': \"delimiters \\\\langle \\\\rangle \\\\vert 2\",  // <x|y>; mnemonic: [i]nner product\n        'I': \"delimiters \\\\langle \\\\rangle \\\\vert 3\",  // <x|y|z>\n        'k': \"delimiters \\\\vert \\\\rangle\",  // |x> Dirac ket\n        'm': \"delimiters \\\\lmoustache \\\\rmoustache\",\n        'n': \"delimiters \\\\lVert \\\\rVert\",  // n = Norm\n        'N': \"delimiters \\\\lVert \\\\rVert\",  // alias for n\n        'w': \"delimiters . \\\\vert\",  // \"where\"\n        'W': \"delimiters . \\\\vert\",  // alias for w\n        '|': \"delimiters \\\\vert \\\\vert\",\n        '<': \"delimiters \\\\langle \\\\rangle\",\n        '(': \"delimiters ( )\",\n        '[': \"delimiters [ ]\",\n        ']': \"name doublebrackets;insert \\\\llbracket;swap;concat;insert \\\\rrbracket;concat\",\n        '{': \"delimiters \\\\{ \\\\}\"\n    },\n\n    // right-curly-brace prefix: custom delimiter builder mode\n    custom_delimiters: {\n        '1': \"custom_delimiter_arity 1\",\n        '2': \"custom_delimiter_arity 2\",\n        '3': \"custom_delimiter_arity 3\",\n        '4': \"custom_delimiter_arity 4\",\n        '5': \"custom_delimiter_arity 5\",\n        '6': \"custom_delimiter_arity 6\",\n        '7': \"custom_delimiter_arity 7\",\n        '8': \"custom_delimiter_arity 8\",\n        '9': \"custom_delimiter_arity 9\",\n        'c': \"custom_delimiter \\\\lceil\",\n        'C': \"custom_delimiter \\\\rceil\",\n        'f': \"custom_delimiter \\\\lfloor\",\n        'F': \"custom_delimiter \\\\rfloor\",\n        'g': \"custom_delimiter \\\\lgroup\",\n        'G': \"custom_delimiter \\\\rgroup\",\n        'm': \"custom_delimiter \\\\lmoustache\",\n        'M': \"custom_delimiter \\\\rmoustache\",\n        'v': \"custom_delimiter \\\\Vert\",\n        '<': \"custom_delimiter \\\\langle\",\n        '>': \"custom_delimiter \\\\rangle\",\n        '(': \"custom_delimiter (\",\n        ')': \"custom_delimiter )\",\n        '[': \"custom_delimiter [\",\n        ']': \"custom_delimiter ]\",\n        '{': \"custom_delimiter \\\\{\",\n        '}': \"custom_delimiter \\\\}\",\n        '.': \"custom_delimiter .\",\n        '/': \"custom_delimiter /\",\n        \"\\\\\": \"custom_delimiter \\\\backslash\",\n        '|': \"custom_delimiter |\"\n    },\n\n    // forward-slash prefix: assorted functions/operators\n    operator: {\n        '1': \"name reciprocal;insert 1;swap;operator frac 2\",\n        '2': \"mode squared\",\n        'a': \"apply_operator 1\",\n        'A': \"apply_operator 2\",\n        'b': \"operator binom 2\",\n        'c': \"named_function cos\",\n        'C': \"named_function csc\",\n        'd': \"mode derivative\",\n        'D': \"named_function det\",\n        'e': \"name exp;insert e;operator mathrm;swap;superscript\",  // exp(x)\n        'E': \"named_function exp\",\n        'f': \"delimiters . . / 2\",  // NOTE: duplicates [,f]\n        'g': \"named_function argmin\",\n        'G': \"named_function argmax\",\n        'h': \"mode hyperbolic\",\n        'i': \"mode integral_limits\",\n        'l': \"name lim;insert \\\\limits;swap;subscript;insert \\\\lim;swap;concat\",  // lim_{x}\n        'm': \"named_function min\",\n        'M': \"named_function max\",\n        'n': \"named_function ln\",\n        'N': \"named_function log\",\n        'o': \"operator mathopen;swap;parenthesize;concat\",   // x f -> f(x)  \"of\"; \\mathopen closes up the spacing after 'f'\n        'O': \"operator mathopen;unrot;infix ,;parenthesize;concat\",  // x y f -> f(x,y)\n        'p': \"parenthesize;operator Pr\",  // Pr(x) (probability)\n        'P': \"operator phase\",\n        'q': \"operator sqrt\",\n        'Q': \"operator sqrt[3]\",\n        's': \"named_function sin\",\n        'S': \"named_function sec\",\n        't': \"named_function tan\",\n        'T': \"named_function cot\",\n        'u': \"name inf;insert \\\\limits;swap;subscript;insert \\\\inf;swap;concat\",\n        'U': \"name sup;insert \\\\limits;swap;subscript;insert \\\\sup;swap;concat\",\n        'v': \"name Var;parenthesize;insert Var;operator operatorname;swap;concat\",\n        'V': \"name Cov;swap;insert ,;concat;swap;concat;parenthesize;insert Cov;operator operatorname;swap;concat\",\n        ';': \"apply_tag\",\n        '/': \"operator frac 2\",\n        \"\\\\\": \"operator tfrac 2\",\n        '}': \"name underbrace;swap;operator underbrace;swap;subscript\",\n        '{': \"name overbrace;swap;operator overbrace;swap;superscript\",\n        '-': \"mode inverse\",\n        \"'\": \"substitute_defer\",\n        'Enter': \"name subsuperscript;unrot;subscript;swap;superscript\"  // apply superscript and subscript at once\n    },\n\n    // TODO: maybe make a more general way of doing these\n    hyperbolic: {\n        's': \"named_function sinh\",\n        'S': \"named_function sech\",\n        'c': \"named_function cosh\",\n        'C': \"named_function csch\",\n        't': \"named_function tanh\",\n        'T': \"named_function coth\"\n    },\n    inverse: {\n        's': \"named_function sin -1\",\n        'S': \"named_function sec -1\",\n        'c': \"named_function cos -1\",\n        'C': \"named_function csc -1\",\n        't': \"named_function tan -1\",\n        'T': \"named_function cot -1\",\n        'h': \"mode inverse_hyperbolic\"\n    },\n    inverse_hyperbolic: {\n        's': \"named_function sinh -1\",\n        'S': \"named_function sech -1\",\n        'c': \"named_function cosh -1\",\n        'C': \"named_function csch -1\",\n        't': \"named_function tanh -1\",\n        'T': \"named_function coth -1\"\n    },\n    squared: {\n        's': \"named_function sin 2\",\n        'S': \"named_function sec 2\",\n        'c': \"named_function cos 2\",\n        'C': \"named_function csc 2\",\n        't': \"named_function tan 2\",\n        'T': \"named_function cot 2\",\n        'h': \"mode squared_hyperbolic\"\n    },\n    squared_hyperbolic: {\n        's': \"named_function sinh 2\",\n        'S': \"named_function sech 2\",\n        'c': \"named_function cosh 2\",\n        'C': \"named_function csch 2\",\n        't': \"named_function tanh 2\",\n        'T': \"named_function coth 2\"\n    },\n\n    // /i prefix\n    integral_limits: {\n        'r': \"name limits_real;insert -\\\\infty;subscript;insert \\\\infty;superscript\",  // -oo..oo : [r]eals\n        'n': \"name limits_negative;insert -\\\\infty;subscript;insert 0;superscript\",  // -oo..0 : [n]egative \n        'p': \"name limits_positive;insert 0;subscript;insert \\\\infty;superscript\",  // 0..oo : [p]ositive\n        'u': \"name limits_unit;insert 0;subscript;insert 1;superscript\",  // 0..1 : [u]nit\n        'U': \"name limits_unit;insert -1;subscript;insert 1;superscript\",  // -1..1 : symmetric [U]nit\n        't': \"name limits_trig;insert 0;subscript;insert 2\\\\pi;superscript\",  // 0..2pi : [t]rigonometric\n        'T': \"name limits_sym_trig;insert -\\\\pi;subscript;insert \\\\pi;superscript\"  // -pi..pi : symmetric [T]rigonometric\n    },\n\n    // /d prefix: derivative operations\n    derivative: {\n        // \\partial y / \\partial x\n        'j': \"name partial_yx;insert \\\\partial;swap;concat;swap;insert \\\\partial;swap;concat;swap;operator frac 2\",\n        // \\partial^2 y / \\partial x^2\n        'J': \"name partial2_yx;insert 2;superscript;insert \\\\partial;swap;concat;swap;insert \\\\partial;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // dy/dx\n        'k': \"name dy_dx;insert d;swap;concat;swap;insert d;swap;concat;swap;operator frac 2\",\n        // d^2(y) / dx^2\n        'K': \"name d2_y_dx2;insert 2;superscript;insert d;swap;concat;swap;insert d;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // \\partial / \\partial x\n        'q': \"name partial_x;insert \\\\partial;swap;concat;insert \\\\partial;swap;operator frac 2\",\n        // \\partial^2 / \\partial x^2\n        'Q': \"name partial2_x2;insert 2;superscript;insert \\\\partial;swap;concat;insert \\\\partial;insert 2;superscript;swap;operator frac 2\",\n        // d/dx\n        'x': \"name d_dx;insert d;swap;concat;insert d;swap;operator frac 2\",\n        // d^2 / dx^2\n        'X': \"name d2_dx2;insert 2;superscript;insert d;swap;concat;insert d;insert 2;superscript;swap;operator frac 2\",\n        // \\partial^2 / \\partial x\\,\\partial y\n        'm': \"name partial2_x_y;insert \\\\partial;swap;concat;insert \\\\partial;rot;concat;swap;insert \\\\,;swap;concat;concat;insert \\\\partial;insert 2;superscript;swap;operator frac 2\",\n        // \\partial^2 z / \\partial x\\,\\partial y\n        'M': \"name partial2_z_x_y;insert \\\\partial;swap;concat;insert \\\\partial;rot;concat;swap;insert \\\\,;swap;concat;concat;swap;insert \\\\partial;insert 2;superscript;swap;concat;swap;operator frac 2\",\n        // gradient\n        'g': \"name gradient;insert \\\\nabla;swap;concat\",\n        // divergence\n        'd': \"name divergence;insert \\\\nabla;insert \\\\cdot;concat;swap;concat\",\n        // curl\n        'c': \"name curl;insert \\\\nabla;insert \\\\times;concat;swap;concat\",\n        // Laplacian\n        'l': \"name laplacian;insert \\\\nabla;insert 2;superscript;swap;concat\"\n    },\n\n    // comma prefix: combine two objects with an infix operation\n    infix: {\n        'a': \"apply_infix\",\n        'b': \"infix \\\\bullet\",\n        'c': \"infix \\\\cap\",\n        'd': \"infix \\\\setminus\",  // (set [d]ifference)\n        'g': \"infix \\\\gets\",\n        'k': \"insert \\\\,;swap;concat;swap;insert \\\\,;concat;swap;delimiters . . \\\\vert 2\",  // x | y  ([k]onditional)\n        'l': \"infix \\\\parallel\",\n        'm': \"infix \\\\mapsto\",\n        'M': \"infix \\\\mp\",\n        'o': \"infix \\\\circ\",\n        'O': \"stackrel overset\",\n        'p': \"infix \\\\perp\",\n        'P': \"infix \\\\pm\",\n        'q': \"infix \\\\quad\\\\mathrm{and}\\\\quad\",\n        'Q': \"infix \\\\quad\\\\mathrm{or}\\\\quad\",\n        's': \"infix \\\\,\",\n        't': \"infix \\\\to\",\n        'u': \"infix \\\\cup\",\n        'U': \"stackrel underset\",\n        'v': \"infix \\\\vee\",\n        'w': \"infix \\\\wedge\",\n        'x': \"infix \\\\times\",\n        'X': \"infix \\\\otimes\",\n        '[': \"infix \\\\llcorner\",  // right-contraction\n        ']': \"infix \\\\lrcorner\",  // left-contraction\n        '|': \"delimiters . . \\\\vert 2\",  // \"infix |\",\n        '=': \"infix \\\\Rightarrow\",\n        '-': \"infix \\\\ominus\",\n        '+': \"infix \\\\oplus\",\n        '.': \"infix \\\\cdot\",\n        ',': \"infix ,\",  // comma without thinspace\n        ' ': \"infix ,\\\\,\",  // comma plus thinspace\n        ':': \"infix :\",\n        ';': \"infix semicolon\\\\:\",\n        '%': \"infix \\\\pmod\",  // y (mod x)\n        '*': \"infix *\",\n        \"\\\\\": \"delimiters . . / 2\",\n        '/': \"infix /\",\n        '>': \"infix \\\\cdots\"\n    },\n\n    // = prefix: relational operators\n    relational: {\n        'a': \"infix \\\\approx\",\n        'c': \"infix \\\\cong\",  // =~  congruent\n        'e': \"infix \\\\equiv\",\n        'E': \"infix \\\\iff\",\n        'g': \"infix >\",\n        'G': \"infix \\\\gg\",\n        'i': \"infix \\\\in\",\n        'I': \"infix \\\\notin\",\n        'l': \"infix <\",\n        'L': \"infix \\\\ll\",\n        'n': \"infix \\\\ne\",\n        'p': \"infix \\\\propto\",\n        'q': \"infix =\",\n        's': \"infix \\\\subseteq\",\n        'S': \"infix \\\\subset\",\n        '=': \"infix =\",\n        '<': \"infix <\",\n        '>': \"infix >\",\n        '[': \"infix \\\\le\",\n        ']': \"infix \\\\ge\",\n        ':': \"infix \\\\coloneqq\",\n        '~': \"infix \\\\sim\",\n        '|': \"infix \\\\vDash\"\n    },\n\n    // apostrophe prefix: assorted standalone math symbols\n    symbol: {\n        '0': \"insert \\\\varnothing\",\n        '1': \"insert -1\",\n        '2': \"name half_display;insert 1;insert 2;operator frac 2\",  // 1/2 (display)\n        '3': \"name half_inline;insert 1;insert 2;infix /\",  // 1/2 (inline)\n        '8': \"insert \\\\infty\",\n        'a': \"insert \\\\forall\",\n        'c': \"insert \\\\cdot\",\n        'C': \"insert \\\\bigcap\",\n        'd': \"insert \\\\partial\",\n        'e': \"insert \\\\exists\",\n        'h': \"insert \\\\hslash\",\n        'i': \"insert \\\\int\",\n        'I': \"insert \\\\iint\",\n        'l': \"insert \\\\ell\",\n        'M': \"insert \\\\mp\",\n        'o': \"insert \\\\circ\",\n        'p': \"insert \\\\prod\",\n        'P': \"insert \\\\pm\",\n        'q': \"insert ?\",\n        's': \"insert \\\\sum\",\n        't': \"insert \\\\intercal\",\n        'T': \"insert \\\\triangle\",\n        'U': \"insert \\\\bigcup\",\n        'v': \"insert \\\\vee\",\n        'w': \"insert \\\\wedge\",\n        'y': \"insert \\\\oint\",\n        'Y': \"insert \\\\oiint\",\n        '.': \"insert \\\\dots\",\n        '>': \"insert \\\\cdots\",\n        '-': \"insert -\",\n        '+': \"insert +\",\n        '*': \"insert \\\\star\",\n        '|': \"insert |\",\n        '=': \"insert_markdown ---\",\n        '?': \"insert ?\",\n        '!': \"insert !\",\n        ',': \"insert ,\",\n        ';': \"insert semicolon\",\n        ':': \"insert :\",\n        '`': \"insert `\",\n        \"'\": \"insert_defer\",\n        ' ': \"insert \",  // \"nothing\", e.g. when you don't want something on one side of an infix\n        'ArrowUp': \"insert \\\\uparrow\",\n        'ArrowDown': \"insert \\\\downarrow\"\n    },\n\n    // . prefix: expression decorators (fonts, hats, etc)\n    decoration: {\n        '1': \"insert -1;superscript\",  // raise to -1 power\n        'a': \"operator overrightarrow\",  // TODO: [R] maybe instead\n        'b': \"operator mathbb\",\n        'c': \"mode color\",\n        'd': \"insert \\\\dagger;superscript\",\n        'D': \"insert \\\\ddagger;superscript\",\n        'e': \"operator bold\",  // bold roman (sort of)\n        'f': \"prefix \\\\therefore\",\n        'F': \"prefix \\\\because\",\n        'g': \"operator mathring\",\n        'h': \"apply_hat hat\",\n        'H': \"apply_hat widehat\",\n        'k': \"operator mathfrak\",\n        'l': \"insert \\\\parallel;subscript\",\n        'm': \"operator mathtt\",\n        'M': \"prefix \\\\mp\",\n        'o': \"operator bar\",\n        'O': \"operator overline\",\n        'p': \"insert \\\\perp;subscript\",\n        'P': \"prefix \\\\pm\",\n        'r': \"operator mathrm\",\n        's': \"operator mathsf\",  // sans-serif\n        't': \"prefix \\\\to\",\n        'T': \"operator widetilde\",\n        'u': \"apply_hat breve\",\n        'U': \"operator utilde\",\n        'v': \"operator vec\",\n        'V': \"apply_hat check\",\n        'W': \"apply_hat widecheck\",\n        'x': \"operator boxed\",\n        'X': \"operator sout\",  // strikeout\n        '.': \"operator dot\",\n        \"\\\"\": \"operator ddot\",\n        ' ': \"insert \\\\,;concat\",  // append thin space\n        \"'\": \"autoparenthesize;prime\",\n        '*': \"insert *;superscript\",\n        '~': \"apply_hat tilde\",\n        '=': \"prefix \\\\Rightarrow\",\n        '-': \"prefix -\",\n        '+': \"prefix +\",\n        '`': \"operator grave\",\n        '/': \"operator cancel\",\n        \"\\\\\": \"operator bcancel\",\n        '_': \"operator underline\"\n    },\n\n    // .c prefix: set colors\n    color: {\n        'b': \"color blue\",\n        'g': \"color green\",\n        'h': \"color #888\",  // grey: [h]alf black\n        'k': \"color black\",\n        'o': \"color orange\",\n        'p': \"color purple\",\n        'r': \"color red\",\n        'y': \"color #ff0\"\n    },\n\n    // | prefix: array/matrix operations\n    array: {\n        'a': \"build_align aligned\",\n        'c': \"build_align cases\",\n        'C': \"build_align rcases\",\n        'd': \"dissolve_matrix\",\n        'e': \"name ellipsis_list;build_list ,\\\\,;insert ,\\\\,\\\\dots;concat\",\n        'E': \"insert_matrix_ellipses\",\n        'g': \"build_align gathered\",\n        'k': \"build_substack\",\n        'm': \"build_matrix_row matrix\",\n        'p': \"name plus_list;build_list +;insert +\\\\cdots;concat\",\n        's': \"split_matrix\",\n        'T': \"matrix_transpose\",\n        'v': \"build_matrix_row vmatrix\",\n        'V': \"build_matrix_row Vmatrix\",\n        '|': \"stack_matrices\",\n        ',': \"build_list ,\",\n        ' ': \"build_list ,\\\\,\",\n        '.': \"name ellipsis_list_2;build_list ,\\\\, ,\\\\,\\\\dots,\\\\,\",\n        ';': \"build_list semicolon\\\\,\",\n        '+': \"name plus_list_2;insert +;swap;build_infix_list \\\\cdots \",\n        'Enter': \"stack_matrices\",\n        '(': \"build_matrix_row pmatrix\",\n        '[': \"build_matrix_row bmatrix\",\n        '{': \"build_matrix_row Bmatrix\"\n    },\n\n    editor: {\n        'Tab': \"finish_editing\",\n        'Shift+Enter': \"finish_editing\",\n        // TODO: use ArrowUp for the following when in layouts where stack is on bottom\n        'Shift+ArrowDown': \"import_item_into_editor\",\n        'Escape': \"cancel_editing\",\n    },\n\n    script: {\n        '[alpha]': \"name mathscr_letter;self_insert;to_case uppercase;operator mathscr\",\n        '&': \"insert \\\\&\"\n    },\n\n    calligraphic: {\n        '[alpha]': \"name mathcal_letter;self_insert;to_case uppercase;operator mathcal\",\n        '%': \"insert \\\\%\"\n    },\n\n    // ; prefix: lowercase Greek letters\n    lowercase_greek: {\n        'a': \"insert \\\\alpha\",     'b': \"insert \\\\beta\",\n        'c': \"insert \\\\chi\",       'd': \"insert \\\\delta\",\n        'e': \"insert \\\\epsilon\",   'f': \"insert \\\\phi\",\n        'g': \"insert \\\\gamma\",     'h': \"insert \\\\eta\",\n        'i': \"insert \\\\iota\",      'j': \"insert \\\\varphi\",\n        'k': \"insert \\\\kappa\",     'l': \"insert \\\\lambda\",\n        'm': \"insert \\\\mu\",        'n': \"insert \\\\nu\",\n        'o': \"insert \\\\omega\",     'p': \"insert \\\\pi\",\n        'q': \"insert \\\\vartheta\",  'r': \"insert \\\\rho\",\n        's': \"insert \\\\sigma\",     't': \"insert \\\\tau\",\n        'u': \"insert \\\\upsilon\",   'v': \"insert \\\\theta\",\n        'w': \"insert \\\\omega\",     'x': \"insert \\\\xi\",\n        'y': \"insert \\\\psi\",       'z': \"insert \\\\zeta\",\n\n        ';': \"infix semicolon\"\n    },\n    // : prefix: uppercase Greek letters\n    uppercase_greek: {\n        'd': \"insert \\\\Delta\",     'e': \"insert \\\\varepsilon\",\n        'f': \"insert \\\\Phi\",       'g': \"insert \\\\Gamma\",\n        'l': \"insert \\\\Lambda\",    'm': \"insert \\\\varpi\",\n        'o': \"insert \\\\Omega\",     'p': \"insert \\\\Pi\",\n        'q': \"insert \\\\vartheta\",  'r': \"insert \\\\varrho\",\n        's': \"insert \\\\Sigma\",     't': \"insert \\\\varsigma\",\n        'u': \"insert \\\\Upsilon\",   'v': \"insert \\\\Theta\",\n        'w': \"insert \\\\Omega\",     'x': \"insert \\\\Xi\",\n        'y': \"insert \\\\Psi\",\n        'n': \"insert \\\\nabla\",  // special case\n\n        // TODO: case-insensitive keybindings\n        'D': \"insert \\\\Delta\",     'E': \"insert \\\\varepsilon\",\n        'F': \"insert \\\\Phi\",       'G': \"insert \\\\Gamma\",\n        'L': \"insert \\\\Lambda\",    'M': \"insert \\\\varpi\",\n        'O': \"insert \\\\Omega\",     'P': \"insert \\\\Pi\",\n        'Q': \"insert \\\\vartheta\",  'R': \"insert \\\\varrho\",\n        'S': \"insert \\\\Sigma\",     'T': \"insert \\\\varsigma\",\n        'U': \"insert \\\\Upsilon\",   'V': \"insert \\\\Theta\",\n        'W': \"insert \\\\Omega\",     'X': \"insert \\\\Xi\",\n        'Y': \"insert \\\\Psi\",\n        'N': \"insert \\\\nabla\",\n\n        ':': \"infix :\"\n    }\n};\n\n\nexport default EditorKeymap;\n","\n\nimport KeybindingTable from './Keymap';\nimport marked from 'marked';\nimport JSZip from 'jszip';\n\n\nclass Keymap {\n    constructor() {\n        this.bindings = KeybindingTable;\n    }\n    \n    lookup_binding(mode, key) {\n        const mode_map = this.bindings[mode];\n        if(!mode_map) return null;\n        if(mode_map[key]) return mode_map[key];\n        if(mode_map['[alpha]'] && /^[a-zA-Z]$/.test(key)) return mode_map['[alpha]'];\n        if(mode_map['[digit]'] && /^[0-9]$/.test(key)) return mode_map['[digit]'];\n        if(mode_map['[alnum]'] && /^[a-zA-Z0-9]$/.test(key)) return mode_map['[alnum]'];\n        if(mode_map['default']) return mode_map['default'];\n        if(mode === 'base' || mode === 'editor')\n            return null;\n        else\n            return 'cancel';\n    }\n}\n\n\nclass Settings {\n    static load_from_local_storage() {\n        const serialized_string = localStorage.getItem('settings');\n        if(serialized_string)\n            return Settings.from_json(JSON.parse(serialized_string));\n        else\n            return new Settings();\n    }\n    \n    static from_json(json) {\n        let s = new Settings();\n        Settings.saved_keys.forEach(key => { s[key] = json[key]; });\n        return s;\n    }\n    \n    constructor() {\n        this.current_keymap = new Keymap();\n        this.selected_theme = 'default';\n        this.last_opened_filename = null;\n        this.popup_mode = null;  // null, 'help', 'files', 'keymap'\n        this.layout = this.default_layout();\n    }\n\n    default_layout() {\n        return {\n            zoom_factor: 0,\n            stack_rightalign_math: false,\n            document_rightalign_math: false,\n            stack_side: 'left',\n            stack_split: 50\n        };\n    }\n\n    apply_layout_to_dom(stack_panel_elt, document_panel_elt, popup_panel_elt) {\n        const layout = this.layout;\n\n        // Show or hide popup panel.\n        popup_panel_elt.style.display = this.popup_mode ? 'block' : 'none';\n\n        // Set overall scale factor.\n        const root_elt = document.getElementById('root');\n        const percentage = Math.round(100*Math.pow(1.05, layout.zoom_factor || 0));\n        root_elt.style.fontSize = percentage + '%';\n\n        // Set up panel layout.\n        let [stack_bounds, document_bounds] = this._split_rectangle(\n            {x: 0, y: 0, w: 100, h: 100}, layout.stack_side, layout.stack_split);\n\n        this._apply_bounds(stack_panel_elt, stack_bounds);\n        this._apply_bounds(document_panel_elt, document_bounds);\n    }\n\n    // Split a parent bounding rectangle into \"primary\" and \"secondary\"\n    // subrectangles according to the given 'side' and split %.\n    _split_rectangle(bounds, side, split_percent) {\n        const w1 = Math.round(split_percent*bounds.w/100);\n        const w2 = bounds.w - w1;\n        const h1 = Math.round(split_percent*bounds.h/100);\n        const h2 = bounds.h - h1;\n        switch(side) {\n        case 'left':\n            return [\n                {x: bounds.x, y: bounds.y, w: w1, h: bounds.h},\n                {x: bounds.x+w1, y: bounds.y, w: w2, h: bounds.h}\n            ];\n        case 'right':\n            return [\n                {x: bounds.x+w2, y: bounds.y, w: w1, h: bounds.h},\n                {x: bounds.x, y: bounds.y, w: w2, h: bounds.h}\n            ];\n        case 'top':\n            return [\n                {x: bounds.x, y: bounds.y, w: bounds.w, h: h1},\n                {x: bounds.x, y: bounds.y+h1, w: bounds.w, h: h2}\n            ];\n        case 'bottom':\n            return [\n                {x: bounds.x, y: bounds.y+h2, w: bounds.w, h: h1},\n                {x: bounds.x, y: bounds.y, w: bounds.w, h: h2}\n            ];\n        default:\n            return [bounds, bounds];\n        }\n    }\n\n    _apply_bounds(elt, bounds) {\n        elt.style.left = bounds.x + '%';\n        elt.style.top = bounds.y + '%';\n        elt.style.width = bounds.w + '%';\n        elt.style.height = bounds.h + '%';\n    }\n\n    save() {\n        const serialized_string = JSON.stringify(this.to_json());\n        localStorage.setItem('settings', serialized_string);\n    }\n\n    to_json() {\n        let json = {};\n        Settings.saved_keys.forEach(key => { json[key] = this[key]; });\n        return json;\n    }\n}\n\nSettings.saved_keys = [\n    'selected_theme', 'last_opened_filename', 'popup_mode', 'layout'\n];\n\n\n// Helper for generating LaTeX strings from Expr objects.\nclass LatexEmitter {\n    constructor() {\n        this.tokens = [];\n        this.last_token_type = null;\n    }\n\n    emit_token(text, token_type) {\n        if(text.length > 0) {\n            this.tokens.push(text);\n            this.last_token_type = token_type;\n        }\n    }\n\n    expr(expr) { expr.emit_latex(this); }\n\n    grouped_expr(expr, force_braces) { this.grouped((() => this.expr(expr)), force_braces); }\n\n    grouped(fn, force_braces) {\n        let [old_tokens, old_last_token_type] = [this.tokens, this.last_token_type];\n        [this.tokens, this.last_token_type] = [[], null];\n\n        fn();\n\n        const [tokens, last_token_type] = [this.tokens, this.last_token_type];\n        this.tokens = old_tokens;\n        this.last_token_type = old_last_token_type;\n\n        // The only real 'special' case is a group with exactly 1 token.\n        // In that case we may be able to omit the surrounding braces if\n        // it's a 1-character string or a single \\latexcommand.  In all other\n        // cases the braces need to be included.\n        if(force_braces === 'force' || tokens.length === 0 || tokens.length > 1) {\n            this.text('{');\n            this.text(tokens.join(''));\n            this.text('}');\n        }\n        else {  // tokens.length === 1 && !force_braces\n            if(last_token_type === 'text') {\n                if(tokens[0].length === 1)\n                    this.text(tokens[0]);\n                else {\n                    this.text('{');\n                    this.text(tokens[0]);\n                    this.text('}');\n                }\n            }\n            else if(force_braces === 'force_commands') {\n                this.text('{');\n                this.emit_token(tokens[0], 'command');\n                this.text('}');\n            }\n            else\n                this.emit_token(tokens[0], 'command');\n        }\n    }\n\n    // Emit 'raw' LaTeX code.\n    text(text) {\n        if(this.last_token_type === 'command') {\n            // Determine if a space is needed after the last command; this depends\n            // on whether two non-special characters are adjacent.\n            const last_token = this.tokens[this.tokens.length-1];\n            if(this._is_latex_identifier_char(last_token.charAt(last_token.length-1)) &&\n               (this._is_latex_identifier_char(text.charAt(0)) /*|| text.charAt(0) === '{'*/))\n                this.emit_token(' ', 'text');\n        }\n        this.emit_token(text, 'text');\n    }\n\n    _is_latex_identifier_char(ch) {\n        return /^[a-zA-Z]$/.test(ch);\n    }\n\n    // \\latexcommand (something that isn't a single special-character command like \\,)\n    command(command_name, command_options) {\n        if(command_options)\n            command_name = command_name + '[' + command_options + ']';\n        this.emit_token(\"\\\\\" + command_name, 'command');\n    }\n\n    // Treated like text or a command depending on whether it starts with a backslash.\n    text_or_command(text) {\n        if(text.startsWith(\"\\\\\"))\n            this.command(text.slice(1));\n        else\n            this.text(text);\n    }\n\n    begin_environment(envname) { this.text(\"\\\\begin{\" + envname + \"}\\n\"); }\n\n    end_environment(envname) { this.text(\"\\n\\\\end{\" + envname + \"}\\n\"); }\n\n    align_separator() { this.text(' & '); }\n\n    // Table row separators for e.g. \\begin{matrix}\n    row_separator() {\n        // Give a little more space between rows, for fractions.\n        // See KaTeX \"common issues\" page.\n        this.text(\"\\\\\\\\[0.1em]\\n\");\n        //this.text(\"\\\\\\\\\\n\");\n    }\n\n    finished_string() { return this.tokens.join(''); }\n}\n\n\n// Overall app state, holding the stack and document.\nclass AppState {\n    static from_json(json) {\n        return new AppState(\n            Stack.from_json(json.stack),\n            Document.from_json(json.document)\n        );\n    }\n    \n    constructor(stack, document) {\n        this.stack = stack || this._default_stack();\n        this.document = document || new Document([], 0);\n        this.is_dirty = false;\n    }\n\n    _default_stack() {\n        const item = new MarkdownItem('Welcome to the editor.  Press [**?**] to toggle help.');\n        return new Stack([item]);\n    }\n\n    same_as(app_state) {\n        // NOTE: AppState stuff is never modified in-place, so all that needs to be\n        // done here is check object identities.\n        return this.stack === app_state.stack && this.document === app_state.document;\n    }\n\n    to_json() {\n        return {\n            stack: this.stack.to_json(),\n            document: this.document.to_json(),\n            format: 1\n        };\n    }\n}\n\n\nclass UndoStack {\n    constructor() {\n        // Stack of saved AppState instances (most recent one at the end).\n        this.state_stack = [];\n\n        // Maximum size of this.state_stack\n        this.max_stack_depth = 100;\n        \n        // Number of consecutive undo operations that have been performed so far.\n        // If this is greater that zero, 'redo' operations can revert the undos.\n        this.undo_count = 0;\n    }\n\n    clear(initial_app_state) {\n        this.state_stack = [initial_app_state];\n        this.undo_count = 0;\n    }\n\n    push_state(state) {\n        // Only save state if it differs from the state we'd be undoing to.\n        if(this.state_stack.length > this.undo_count &&\n           this.state_stack[this.state_stack.length - this.undo_count - 1].same_as(state))\n            return null;\n\n        if(this.undo_count > 0) {\n            // Truncate already-undone saved states.  This means that 'redo' will no longer work\n            // until some more undos are performed.\n            this.state_stack = this.state_stack.slice(0, this.state_stack.length - this.undo_count);\n            this.undo_count = 0;\n        }\n\n        this.state_stack.push(state);\n\n        // Prevent the undo list from growing indefinitely.\n        if(this.state_stack.length > this.max_stack_depth)\n            this.state_stack = this.state_stack.slice(this.state_stack.length - this.max_stack_depth);\n\n        return state;\n    }\n\n    undo_state() {\n        if(this.state_stack.length-1 > this.undo_count) {\n            this.undo_count++;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else return null;\n    }\n\n    redo_state() {\n        if(this.undo_count > 0) {\n            this.undo_count--;\n            return this.state_stack[this.state_stack.length - this.undo_count - 1];\n        }\n        else return null;\n    }\n}\n\n\nclass DocumentStorage {\n    constructor() {\n        this.open_request = null;\n        this.database = null;\n    }\n\n    open_database(onsuccess) {\n        if(!indexedDB) return;\n        this.on_open_success = onsuccess;\n        this.open_request = indexedDB.open('rpnlatex', 1);\n        this.open_request.onupgradeneeded = this.handle_upgrade_database.bind(this);\n        this.open_request.onsuccess = this.handle_open_success.bind(this);\n        this.open_request.onerror = this.handle_open_error.bind(this);\n    }\n\n    handle_upgrade_database(event) {\n        this.database = this.open_request.result;\n        switch(event.oldVersion) {\n        case 0: this.build_initial_schema(); break;\n        default: break;\n        }\n    }\n\n    build_initial_schema() {\n        this.database.createObjectStore('documents', {keyPath: 'filename'});\n        this.database.createObjectStore('documents_metadata', {keyPath: 'filename'});\n    }\n\n    handle_open_error(event) {\n        //alert(\"Unable to open IndexedDB for document storage.  You will be unable to save or load documents.\\nThis may happen in Private Browsing mode on some browsers.\\nError message: \" + this.open_request.error);\n        this.open_request = null;\n    }\n\n    handle_open_success(event) {\n        this.database = this.open_request.result;\n        this.open_request = null;\n        this.database.onversionchange = function () {\n            this.database.close();\n            this.database = null;\n            alert('Warning: database is outdated, please reload the page.');\n        };\n        if(this.on_open_success) this.on_open_success();\n    }\n\n    create_transaction(readwrite) {\n        return this.database.transaction(\n            ['documents', 'documents_metadata'],\n            readwrite ? 'readwrite' : 'readonly');\n    }\n\n    sanitize_filename(filename) {\n        const fn = filename.replaceAll(/[^a-zA-Z0-9_ ]/g, '').trim();\n        return (fn.length === 0 || fn.length > 200) ? null : fn;\n    }\n\n    load_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let document_store = transaction.objectStore('documents');\n        let request = document_store.get(filename);\n        request.onsuccess = () => {\n            // NOTE: request.result will be undefined if the filename key wasn't\n            // found.  This still counts as a 'success'.\n            const json = request.result;\n            if(json) {\n                const app_state = AppState.from_json(request.result);\n                onsuccess(filename, app_state);\n            }\n            else\n                onerror(filename, '???');  // TODO\n        };\n        request.onerror = () => {\n            onerror(filename, '???');  // TODO\n        };\n    }\n\n    save_state(app_state, filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let serialized_json = app_state.to_json();\n        serialized_json.filename = filename;\n\n        // Estimate the file size by serializing JSON.\n        // IndexedDB also does this serialization itself, but there doesn't\n        // seem to be any way to reuse that result directly.\n        const filesize = JSON.stringify(serialized_json).length;\n\n        const metadata_json = {\n            filename: filename,\n            filesize: filesize,\n            description: '',  // TODO\n            stack_item_count: app_state.stack.depth(),\n            document_item_count: app_state.document.items.length,\n            timestamp: new Date()\n        };\n        \n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').put(serialized_json);\n        transaction.objectStore('documents_metadata').put(metadata_json);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    delete_state(filename, onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(true);\n        transaction.objectStore('documents').delete(filename);\n        transaction.objectStore('documents_metadata').delete(filename);\n        if(onsuccess) transaction.oncomplete = onsuccess;\n        if(onerror) transaction.onabort = onerror;\n    }\n\n    fetch_file_list(onsuccess, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let request = transaction.objectStore('documents_metadata').getAll();\n        request.onsuccess = () => {\n            request.result.forEach(row => {\n                // Parse the timestamp\n                const ts_value = Date.parse(row.timestamp);\n                row.timestamp = ts_value ? new Date(ts_value) : null;\n            });\n            onsuccess(request.result);\n        };\n        request.onerror = onerror;\n    }\n\n    // Fetch all documents using a cursor.  'onrowfetched' is invoked once per document\n    // and then 'onfinished' is invoked at the end.\n    fetch_all_documents(onrowfetched, onfinished, onerror) {\n        if(!this.database) return onerror();\n        let transaction = this.create_transaction(false);\n        let cursor = transaction.objectStore('documents').openCursor();\n        cursor.onsuccess = (event) => {\n            const c = event.target.result;\n            if(c) {\n                onrowfetched(c.value);\n                c.continue();\n            }\n            else\n                onfinished();\n        };\n        cursor.onerror = onerror;\n    }\n}\n\n\n// Manage state of importing/exporting zip archives.\nclass ImportExportState {\n    constructor() {\n        // States:\n        //   'idle' - if this.download_url is populated, an export download is ready\n        //   'error' - export failed, this.error_message is populated\n        //   'loading' - in the process of loading from the database cursor\n        //   'zipping' - creation of zip file in progress\n        //   'uploading' - user is uploading an archive zipfile\n        //   'importing' - uploaded zipfile is being processed/imported\n        this.state = 'idle';\n\n        this.document_storage = null;  // will be initialized by AppState\n\n        // Number of imported documents handled so far.\n        this.import_count = 0;\n\n        // Number of failures noted this import (if >0, this.error_message will also be set).\n        this.failed_count = 0;\n        this.error_message = null;\n\n        // Holds the last-generated blob download URL, if any.\n        this.download_url = null;\n\n        // This will be set on a successful import.\n        this.import_result_string = null;\n\n        // This will be set to true if the main file list (FileManagerState) needs to be refreshed from the DB.\n        this.file_list_needs_update = false;\n\n        // This can be set to a function to monitor state changes.\n        this.onstatechange = null;\n    }\n\n    // TODO: -> state_description()\n    textual_state() {\n        switch(this.state) {\n        case 'idle': return this.download_url ? 'Download Ready' : 'Ready for export or import';\n        case 'error': return 'Error: ' + this.error_message;\n        case 'loading': return 'Extacting database...';\n        case 'zipping': return 'Compressing files...';\n        case 'uploading': return 'Uploading data...';\n        case 'importing': return 'Importing documents: ' + this.import_count + ' so far';\n        default: return '???';\n        }\n    }\n\n    download_available() {\n        return this.state === 'idle' && this.download_url;\n    }\n\n    generate_download_filename() {\n        const date = new Date();\n        return [\n            'rpnlatex_', date.getFullYear().toString(), '_',\n            date.toLocaleString('default', {month: 'short'}).toLowerCase(),\n            '_', date.getDate().toString().padStart(2, '0'), '.zip'\n        ].join('');\n    }\n\n    change_state(new_state) {\n        this.state = new_state;\n        if(this.onstatechange)\n            this.onstatechange(this);\n    }\n    \n    start_exporting() {\n        let document_storage = this.document_storage;\n        this.zip = new JSZip();\n        document_storage.fetch_all_documents(\n            (row) => this.add_document_json_to_zip(row),\n            () => this.start_compressing(),\n            () => {\n                this.error_message = 'Unable to export the document database.';\n                this.change_state('error');\n            });\n        this.change_state('loading');\n    }\n\n    add_document_json_to_zip(json) {\n        this.zip.file(json.filename + '.json', JSON.stringify(json));\n    }\n\n    start_compressing() {\n        this.change_state('zipping');\n        this.zip.generateAsync({type: 'blob'}).then(content_blob => {\n            this.finished_compressing(content_blob);\n        });\n    }\n\n    clear_download_url() {\n        if(this.download_url) {\n            URL.revokeObjectURL(this.download_url);\n            this.download_url = null;\n        }\n    }\n\n    finished_compressing(content_blob) {\n        this.clear_download_url();\n        this.download_url = URL.createObjectURL(content_blob);\n        this.zip = null;\n        this.change_state('idle');\n    }\n\n    // zipfile is a File object from a <input type=\"file\"> element.\n    start_importing(zipfile) {\n        this.clear_download_url();\n        this.import_result_string = null;\n        if(zipfile.type !== 'application/zip') {\n            alert('Import files must be zip archives.');\n            return;\n        }\n        this.change_state('uploading');\n        let reader = new FileReader();\n        reader.addEventListener(\n            'load',\n            event => this.process_uploaded_data(event.target.result));\n        reader.readAsArrayBuffer(zipfile);\n    }\n\n    process_uploaded_data(data) {\n        this.import_count = 0;\n        this.error_message = null;\n        this.change_state('importing');\n        JSZip.loadAsync(data).then(zipfile => {\n            let promises = [];\n            for(let filename in zipfile.files) {\n                const file = zipfile.files[filename];\n                if(filename.endsWith('.json')) {\n                    promises.push(\n                        file.async('string').then(\n                            content => this.import_file(file.name.slice(0, file.name.length-5), content)));\n                }\n                else {\n                    this.error_message = 'Invalid filename in archive: ' + filename;\n                    this.failed_count++;\n                }\n            }\n            Promise.all(promises).then(\n                () => {\n                    if(this.failed_count > 0)\n                        this.import_result_string = 'Errors encountered: ' + this.error_message;\n                    else\n                        this.import_result_string = 'Successfully imported ' + this.import_count + ' document' + (this.import_count === 1 ? '' : 's');\n                    this.change_state('idle');\n                    this.file_list_needs_update = true;\n                });\n        });\n    }\n\n    import_file(filename, content) {\n        let document_storage = this.document_storage;\n        let parsed, app_state;\n        try {\n            parsed = JSON.parse(content);\n            app_state = AppState.from_json(parsed);\n        } catch(e) {\n            this.error_message = 'Invalid document found in zip file: ' + filename;\n            this.failed_count++;\n            return;\n        }\n        document_storage.save_state(app_state, filename);\n        this.import_count++;\n        this.change_state('importing');\n    }\n}\n\n\nclass FileManagerState {\n    constructor(file_list, selected_filename, current_filename) {\n        this.file_list = file_list;\n        this.selected_filename = selected_filename;\n        this.current_filename = current_filename;\n        this.unavailable = false;  // set to true if there's a database error\n    }\n\n    sort_file_list(field, ascending) {\n        this.file_list.sort((a, b) => {\n            const a_value = a[field], b_value = b[field];\n            return (ascending ? 1 : -1)*(a_value === b_value ? 0 : (a_value < b_value ? -1 : 1));\n        });\n    }\n\n    // basename -> basename_1\n    // basename_1 -> basename_2\n    // The first available name is used, so basename_50 -> basename_2\n    // if basename_2 is available but basename_1 is taken.\n    generate_unused_filename(basename) {\n        if(this.unavailable || !this.file_list)\n            return basename;\n        basename = basename.replace(/_\\d+$/, '')\n        for(let n = 1; n < 1000; n++) {\n            const candidate = basename + '_' + n;\n            if(!this.file_list.some(file => file.filename === candidate))\n                return candidate;\n        }\n        return basename + '_toomany';\n    }\n\n    // For moving up or down in the list of files.\n    find_adjacent_filename(filename, offset) {\n        if(this.unavailable || !this.file_list) return null;\n        let new_filename = null;\n        let file_list = this.file_list;\n        file_list.forEach((f, index) => {\n            if(f.filename === filename) {\n                let new_index = index+offset;\n                if(new_index < 0) new_index = 0;\n                if(new_index >= file_list.length) new_index = file_list.length-1;\n                new_filename = file_list[new_index].filename;\n            }\n        });\n        if(!new_filename && file_list.length > 0)\n            new_filename = file_list[0].filename;\n        return new_filename;\n    }\n}\n\n\nclass Expr {\n    static from_json(json) {\n        switch(json.expr_type) {\n        case 'command':\n            return new CommandExpr(json.command_name, this._list(json.operand_exprs), json.options);\n        case 'prefix':\n            return new PrefixExpr(this._expr(json.base_expr), this._expr(json.prefix_expr));\n        case 'infix':\n            return new InfixExpr(this._expr(json.operator_expr), this._expr(json.left_expr), this._expr(json.right_expr));\n        case 'defer':\n            return new DeferExpr();\n        case 'text':\n            return new TextExpr(json.text);\n        case 'sequence':\n            return new SequenceExpr(this._list(json.exprs));\n        case 'delimiter':\n            return new DelimiterExpr(json.left_type, json.right_type, json.middle_type, this._list(json.inner_exprs));\n        case 'subscriptsuperscript':\n            return new SubscriptSuperscriptExpr(this._expr(json.base_expr), this._expr(json.subscript_expr), this._expr(json.superscript_expr));\n        case 'array':\n            return new ArrayExpr(json.array_type, json.row_count, json.column_count, this._list2d(json.element_exprs));\n        case 'accumulator':\n            return new AccumulatorExpr(json.accumulator_type, json.text);\n        default:\n            return new TextExpr('invalid expr type ' + json.expr_type);\n        }\n    }\n\n    // Helper routines for from_json\n    static _expr(json) { return json ? Expr.from_json(json) : null; }\n    static _list(json_array) { return json_array.map(expr_json => Expr.from_json(expr_json)); }\n    static _list2d(json_array) { return json_array.map(row_exprs => Expr._list(row_exprs)); }\n    \n    // Concatenate two Exprs into one.  This will merge Sequence and Text\n    // nodes when possible, instead of creating nested SequenceExprs.\n    static combine_pair(left, right) {\n        const left_type = left.expr_type(), right_type = right.expr_type();\n        if(left_type === 'sequence' && right_type === 'sequence')\n            return new SequenceExpr(left.exprs.concat(right.exprs));\n        else if(left_type === 'text' && right_type === 'text')\n            return new TextExpr(left.text + right.text);\n        else if(left_type === 'sequence' && right_type === 'text' &&\n                left.exprs[left.exprs.length-1].expr_type() === 'text') {\n            // Left sequence ends in a Text; merge it with the new Text.\n            return new SequenceExpr(\n                left.exprs.slice(0, -1).concat([\n                    new TextExpr(left.exprs[left.exprs.length-1].text + right.text)\n                ]));\n        }\n        else if(left_type === 'text' && right_type === 'text' &&\n                right.exprs[0].expr_type() === 'text') {\n            // Right sequence starts with a Text; merge it with the new Text.\n            return new SequenceExpr(\n                [new TextExpr(left.text + right.exprs[0].text)\n                ].concat(right.exprs.slice(1)));\n        }\n        else if(left_type === 'command' && right_type === 'command')\n\t    return Expr.combine_command_pair(left, right);\n\telse\n            return new SequenceExpr([left, right]);\n    }\n\n    // Combine two CommandExprs with some special-casing for particular\n    // command pairs (combining integral symbols currently).\n    static combine_command_pair(left, right) {\n\tconst left_name = left.command_name, right_name = right.command_name;\n\tlet new_command_name = null;\n\tif(left_name === 'int' && right_name === 'int') new_command_name = 'iint';\n\tif(left_name === 'iint' && right_name === 'int') new_command_name = 'iiint';\n\tif(left_name === 'int' && right_name === 'iint') new_command_name = 'iiint';\n\tif(left_name === 'oint' && right_name === 'oint') new_command_name = 'oiint';\n\tif(left_name === 'oiint' && right_name === 'oint') new_command_name = 'oiiint';\n\tif(left_name === 'oint' && right_name === 'oiint') new_command_name = 'oiiint';\n\tif(new_command_name)\n\t    return new CommandExpr(new_command_name);\n\telse\n\t    return new SequenceExpr([left, right]);\n    }\n    \n    expr_type() { return '???'; }\n\n    to_latex() {\n        let emitter = new LatexEmitter();\n        this.emit_latex(emitter);\n        return emitter.finished_string();\n    }\n\n    emit_latex(emitter) { emitter.text('INVALID'); }\n\n    // Return a list of property names on this object that should be serialized\n    json_keys() { return []; }\n\n    // Subclasses can extend this if they need special handling.\n    to_json() {\n        let json = { expr_type: this.expr_type() };\n        this.json_keys().forEach(json_key => {\n            const obj = this[json_key];\n            let value;\n            if(obj === null || obj === undefined)\n                value = null;\n            else if(typeof(obj) === 'object' && obj instanceof Expr)\n                value = obj.to_json();\n            else if(typeof(obj) === 'object') {\n                // Assume it's an Array.  It could also be a 2-dimensional array, in which case the subclasses\n                // need to extend to_json() instead of relying on this default.\n                value = obj.map(elt => elt.to_json());\n            }\n            else // Strings, numbers, etc.\n                value = obj;\n            json[json_key] = value;\n        });\n        return json;\n    }\n\n    to_text() { return \"$$\\n\" + this.to_latex() + \"\\n$$\"; }\n\n    // Invoke fn once for each subexpression in this expression tree (including 'this').\n    // The visiting is performed depth-first, left-to-right, so should correspond visually\n    // to the left-to-right rendering of the expression.\n    visit(fn) { fn(this); }\n\n    // Find the first DeferExpr that exists in this expression.  Returns null if none.\n    find_defer() {\n        let found = null;\n        this.visit(expr => {\n            if(expr.expr_type() === 'defer' && !found)\n                found = expr;\n        });\n        return found;\n    }\n\n    // Return a (possibly) new Expr with old_expr substituted for new_expr, if old_expr is present.\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr)\n            return new_expr;\n        else\n            return this;\n    }\n}\n\n\n// Represents a \"raw\" LaTeX command such as \\sqrt plus optional operand expressions.\nclass CommandExpr extends Expr {\n    // NOTES:\n    //   - 'command_name' does not include the initial \\ character\n    //   - 'options', if provided, is a plain string that becomes \"\\command_name[options]{...}\"\n    //   - 'command_name' itself can include the options in [brackets], in which case it is\n    //     automatically split off into 'options' (this is used for keybindings).\n    //     (e.g.: command_name='sqrt[3]' -> command_name='sqrt', options='3'\n    constructor(command_name, operand_exprs, options) {\n        super();\n        if(command_name.endsWith(']')) {\n            const index = command_name.indexOf('[');\n            this.command_name = command_name.slice(0, index);\n            this.options = command_name.slice(index+1, command_name.length-1);\n        }\n        else {\n            this.command_name = command_name;\n            this.options = options === undefined ? null : options;\n        }\n        this.operand_exprs = operand_exprs || [];\n    }\n\n    operand_count() { return this.operand_exprs.length; }\n    expr_type() { return 'command'; }\n    json_keys() { return ['command_name', 'operand_exprs', 'options']; }\n\n    emit_latex(emitter) {\n        emitter.command(this.command_name, this.options);\n        // Braces need to be forced around each operand, even single-letter operands.\n        this.operand_exprs.forEach(operand_expr => emitter.grouped_expr(operand_expr, 'force'));\n    }\n\n    visit(fn) {\n        fn(this);\n        this.operand_exprs.forEach(operand_expr => operand_expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new CommandExpr(\n            this.command_name,\n            this.operand_exprs.map(operand_expr => operand_expr.substitute_expr(old_expr, new_expr)),\n            this.options\n        );\n    }\n}\n\n\n// Represents one expression in front of another.\n// This is mainly used to keep track of whether an expression starts with a unary '-',\n// so that we can automatically reverse the sign when combining it with another expression\n// with infix '+', etc.\nclass PrefixExpr extends Expr {\n    constructor(base_expr, prefix_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.prefix_expr = prefix_expr;\n    }\n\n    expr_type() { return 'prefix'; }\n\n    json_keys() { return ['base_expr', 'prefix_expr']; }\n\n    emit_latex(emitter) {\n        emitter.expr(this.prefix_expr);\n        emitter.expr(this.base_expr);\n    }\n\n    visit(fn) {\n        this.prefix_expr.visit(fn);\n        fn(this);\n        this.base_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new PrefixExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.prefix_expr.substitute_expr(old_expr, new_expr));\n    }\n}\n\n\n// Two expressions joined by textual infix (something like + or \\wedge).\n// This is similar to concatenated TextNodes, but using InfixExpr lets things like ArrayExpr\n// automatically detect where to put alignments when the contents are InfixExprs.\n// NOTE: it's possible for left_expr or right_expr to be null; in that case, the corresponding\n// \"side\" isn't rendered.\nclass InfixExpr extends Expr {\n    constructor(operator_expr, left_expr, right_expr) {\n        super();\n        this.operator_expr = operator_expr;\n        this.left_expr = left_expr;\n        this.right_expr = right_expr;\n    }\n\n    expr_type() { return 'infix'; }\n\n    json_keys() { return ['operator_expr', 'left_expr', 'right_expr']; }\n\n    // If the infix operator is a simple command like '+' or '\\cap', return it\n    // (without the initial \\ if it has one).  If it's anything more complex, return null.\n    operator_text() {\n        const op_expr = this.operator_expr;\n        if(op_expr.expr_type() === 'command' && op_expr.operand_count() === 0)\n            return op_expr.command_name;\n        else if(op_expr.expr_type() === 'text')\n            return op_expr.text;\n        else\n            return null;\n    }\n\n    // Check if this is a low-precedence infix expression like x+y\n    // This is mostly for convenience so it doesn't need to be that precise.\n    needs_autoparenthesization() {\n        const op = this.operator_text();\n        return op && (op === '+' || op === '-');\n    }\n\n    emit_latex(emitter) {\n        if(this.left_expr) emitter.expr(this.left_expr);\n        emitter.expr(this.operator_expr);\n        if(this.right_expr) emitter.expr(this.right_expr);\n    }\n\n    visit(fn) {\n        if(this.left_expr) this.left_expr.visit(fn);\n        fn(this);\n        if(this.right_expr) this.right_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new InfixExpr(\n            this.operator_expr.substitute_expr(old_expr, new_expr),\n            this.left_expr.substitute_expr(old_expr, new_expr),\n            this.right_expr.substitute_expr(old_expr, new_expr));\n    }\n}\n\n\n// Represents a \"defer marker\" that can be used with the 'substitute_defer' command.\nclass DeferExpr extends Expr {\n    expr_type() { return 'defer'; }\n    json_keys() { return []; }\n\n    emit_latex(emitter) {\n        // TODO: Maybe use KaTeX HTML support to give it a CSS class to color it\n        // according to the current color theme.\n        // const expr = new CommandExpr('circledast');\n        const expr = new CommandExpr('htmlClass', [new TextExpr('defer_expr'), new CommandExpr('circledast')]);\n        emitter.expr(expr);\n    }\n}\n\n\n// Represents a snippet of LaTeX code; these are the \"leaves\" of Expr-trees.\nclass TextExpr extends Expr {\n    constructor(text) {\n        super();\n        this.text = text;\n    }\n\n    expr_type() { return 'text'; }\n    json_keys() { return ['text']; }\n\n    emit_latex(emitter) { emitter.text(this.text); }\n}\n\n\n// Represents a sequence of expressions all concatenated together.\n// Adjacent SequenceExprs can be merged together; see Expr.combine_pair().\nclass SequenceExpr extends Expr {\n    constructor(exprs) {\n        super();\n        this.exprs = exprs;\n    }\n\n    expr_type() { return 'sequence'; }\n    json_keys() { return ['exprs']; }\n\n    emit_latex(emitter) {\n        this.exprs.forEach(expr => emitter.expr(expr));\n    }\n\n    visit(fn) {\n        fn(this);\n        this.exprs.forEach(expr => expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SequenceExpr(\n            this.exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// \\left( ... \\right)\n// If there is more than one inner_expr, they'll be separated with this.middle_type\n// e.g.: \\left( x \\middle| y \\right)\nclass DelimiterExpr extends Expr {\n    static parenthesize(expr) {\n        return new DelimiterExpr('(', ')', null, [expr]);\n    }\n\n    // Parenthesize 'expr' only if it's a low-precedence InfixExpr like 'x+y'.\n    static autoparenthesize(expr) {\n        if(expr.expr_type() === 'infix' && expr.needs_autoparenthesization())\n            return DelimiterExpr.parenthesize(expr);\n        else\n            return expr;\n    }\n    \n    constructor(left_type, right_type, middle_type, inner_exprs) {\n        super();\n        this.left_type = left_type;\n        this.right_type = right_type;\n        this.middle_type = middle_type || null;  // to avoid 'undefined's in the JSON\n        this.inner_exprs = inner_exprs || [];\n    }\n\n    expr_type() { return 'delimiter'; }\n    json_keys() { return ['left_type', 'right_type', 'middle_type', 'inner_exprs']; }\n\n    emit_latex(emitter) {\n        emitter.command('left');\n        emitter.text_or_command(this.left_type);\n        this.inner_exprs.forEach((expr, index) => {\n            if(index > 0) {\n                emitter.command('middle');\n                emitter.text_or_command(this.middle_type || '|');\n            }\n            emitter.expr(expr);\n        });\n        emitter.command('right');\n        emitter.text_or_command(this.right_type);\n    }\n\n    visit(fn) {\n        fn(this);\n        this.inner_exprs.forEach(expr => expr.visit(fn));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new DelimiterExpr(\n            this.left_type, this.right_type, this.middle_type,\n            this.inner_exprs.map(expr => expr.substitute_expr(old_expr, new_expr)));\n    }\n}\n\n\n// The base expression may have a subscript, a superscript, or both.\n// This needs special handling in LaTeX.\nclass SubscriptSuperscriptExpr extends Expr {\n    constructor(base_expr, subscript_expr, superscript_expr) {\n        super();\n        this.base_expr = base_expr;\n        this.subscript_expr = subscript_expr;\n        this.superscript_expr = superscript_expr;\n    }\n\n    expr_type() { return 'subscriptsuperscript'; }\n    json_keys() { return ['base_expr', 'subscript_expr', 'superscript_expr']; }\n\n    emit_latex(emitter) {\n        // If the base_expr is a command, don't put it inside grouping braces.\n        // This accounts for attaching subscripts or superscripts to commands\n        // with arguments such as \\underbrace{xyz}_{abc}.\n        if(this.base_expr.expr_type() === 'command')\n            emitter.expr(this.base_expr);\n        else\n            emitter.grouped_expr(this.base_expr);\n        if(this.subscript_expr) {\n            emitter.text('_');\n            // 'force_commands' ensures that single LaTeX commands are still grouped, even\n            // though single-letter super/subscripts are still OK to leave ungrouped.\n            // e.g.: x^{\\sum} instead of x^\\sum, but x^2 is fine.\n            emitter.grouped_expr(this.subscript_expr, 'force_commands');\n        }\n        if(this.superscript_expr) {\n            emitter.text('^');\n            emitter.grouped_expr(this.superscript_expr, 'force_commands');\n        }\n    }\n\n    visit(fn) {\n        fn(this);\n        this.base_expr.visit(fn);\n        if(this.subscript_expr) this.subscript_expr.visit(fn);\n        if(this.superscript_expr) this.superscript_expr.visit(fn);\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        return new SubscriptSuperscriptExpr(\n            this.base_expr.substitute_expr(old_expr, new_expr),\n            this.subscript_expr ? this.subscript_expr.substitute_expr(old_expr, new_expr) : null,\n            this.superscript_expr ? this.superscript_expr.substitute_expr(old_expr, new_expr) : null);\n    }\n}\n\n\n// \\begin{bmatrix} ... etc\nclass ArrayExpr extends Expr {\n    // split_mode:  (for placing alignment markers automatically for \"\\cases\" and such)\n    //    'none': do nothing, just put each entry_expr in its own row\n    //    'infix': place alignment markers before infix, if any\n    //    'colon': if there is a ':' infix, remove it and place alignment marker where it was\n    static split_elements(exprs, split_mode) {\n        return exprs.map(expr => ArrayExpr._split_expr(expr, split_mode));\n    }\n\n    // Split up 'expr' into separately-aligned 'columns'.\n    static _split_expr(expr, split_mode) {\n        switch(split_mode) {\n        case 'none':\n            return [expr];\n        case 'infix':\n            if(expr.expr_type() === 'infix')\n                return [expr.left_expr, new InfixExpr(expr.operator_expr, null, expr.right_expr)];\n            else\n                return [expr, null];\n        case 'colon':\n            if(expr.expr_type() === 'infix' && expr.operator_text() === ':')\n                return [expr.left_expr, expr.right_expr];\n            else\n                return [expr, null];\n        default:\n            return [expr];\n        }\n    }\n    \n    constructor(array_type, row_count, column_count, element_exprs) {\n        super();\n        this.array_type = array_type;\n        this.row_count = row_count;\n        this.column_count = column_count;\n        this.element_exprs = element_exprs;\n    }\n\n    expr_type() { return 'array'; }\n    json_keys() { return ['array_type', 'row_count', 'column_count']; }\n\n    is_matrix() {\n        const t = this.array_type;\n        // TODO: t.endsWith('matrix')?\n        return (t === 'bmatrix' || t === 'Bmatrix' || t === 'matrix' ||\n                t === 'pmatrix' || t === 'vmatrix' || t === 'Vmatrix');\n    }\n\n    to_json() {\n        let json = super.to_json();\n        json.element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(expr => expr.to_json()));\n        return json;\n    }\n\n    // Return a new ArrayExpr like this one, but with ellipses inserted before the\n    // last row and column, and along the diagonal.\n    // NOTE: is_matrix() should be true before calling this.\n    with_ellipses() {\n        if(this.row_count <= 1 || this.column_count <= 1)\n            return this;\n        const make_cell = (content) => new TextExpr(content);\n        let new_element_exprs = this.element_exprs.map((row_exprs, index) => [\n            ...row_exprs.slice(0, -1),\n            make_cell((index === 0 || index === this.row_count-1) ? \"\\\\cdots\" : ''),\n            row_exprs[this.column_count-1]\n        ]);\n        let inserted_row_exprs = [make_cell(\"\\\\vdots\")];\n        for(let i = 0; i < this.column_count-2; i++)\n            inserted_row_exprs.push(make_cell(''));\n        inserted_row_exprs.push(make_cell(\"\\\\ddots\"));\n        inserted_row_exprs.push(make_cell(\"\\\\vdots\"));\n        new_element_exprs.splice(this.row_count-1, 0, inserted_row_exprs);\n        return new ArrayExpr(this.array_type, this.row_count+1, this.column_count+1, new_element_exprs);\n    }\n\n    // Return a new ArrayExpr with rows and columns interchanged.\n    // NOTE: is_matrix() should be true before calling this.\n    transposed() {\n        let new_element_exprs = [];\n        for(let i = 0; i < this.column_count; i++)\n            new_element_exprs.push(this.element_exprs.map(\n                row_exprs => this._transpose_cell(row_exprs[i])));\n        return new ArrayExpr(this.array_type, this.column_count, this.row_count, new_element_exprs);\n    }\n\n    // When transposing a matrix, we generally want to flip vertical and horizontal ellipses\n    // within the cells.\n    _transpose_cell(cell_expr) {\n        if(cell_expr.expr_type() === 'text') {\n            switch(cell_expr.text) {\n            case \"\\\\vdots\": return new TextExpr(\"\\\\cdots\");\n            case \"\\\\cdots\": return new TextExpr(\"\\\\vdots\");\n            default: break;\n            }\n        }\n        return cell_expr;\n    }\n\n    // Return an array of 1xN ArrayExprs, one for each row in this matrix.\n    // NOTE: is_matrix() should be true before calling this.\n    split_rows() {\n        return this.element_exprs.map(\n            row_exprs => new ArrayExpr(this.array_type, 1, this.column_count, [row_exprs]));\n    }\n\n    emit_latex(emitter) {\n        emitter.begin_environment(this.array_type);\n        this.element_exprs.forEach((row_exprs, row_index) => {\n            if(row_index > 0) emitter.row_separator();\n            row_exprs.forEach((expr, col_index) => {\n                if(col_index > 0) emitter.align_separator();\n                if(expr) emitter.expr(expr);\n            });\n        });\n        emitter.end_environment(this.array_type);\n    }\n\n    visit(fn) {\n        fn(this);\n        this.element_exprs.forEach(\n            row_exprs => row_exprs.forEach(expr => expr.visit(fn)));\n    }\n\n    substitute_expr(old_expr, new_expr) {\n        if(this === old_expr) return new_expr;\n        const new_element_exprs = this.element_exprs.map(\n            row_exprs => row_exprs.map(\n                expr => expr.substitute_expr(old_expr, new_expr)));\n        return new ArrayExpr(this.array_type, this.row_count, this.column_count, new_element_exprs);\n    }\n}\n\n\n// Accumulate text character-by-character into a string.\n// accumulator_type can be:\n//    latex: turns into a \\arbitrarylatexcommand\n//    text: turns into a TextExpr\nclass AccumulatorExpr extends Expr {\n    constructor(accumulator_type, text) {\n        super();\n        this.accumulator_type = accumulator_type;\n        this.text = text;\n    }\n\n    expr_type() { return 'accumulator'; }\n    json_keys() { return ['accumulator_type', 'text']; }\n\n    with_extra_character(c) {\n        return new AccumulatorExpr(this.accumulator_type, this.text + c);\n    }\n\n    without_last_character() {\n        return new AccumulatorExpr(this.accumulator_type, this.text.slice(0, -1));\n    }\n\n    is_valid_character(ch) {\n        if(this.accumulator_type === 'latex') {\n            // LaTeX commands can only contain upper/lowercase letters,\n            // with the exception of single-character commands like \\:\n            const alpha_regex = /^[a-zA-Z]$/;\n            if(this.text.length === 0 && ch.length === 1)\n                return true;\n            else if(this.text.length === 1 && !alpha_regex.test(this.text))\n                return false;\n            else\n                return alpha_regex.test(ch);\n        }\n        else {\n            // Allow anything in 'normal' text, but suppress multi-character\n            // strings like \"Alt\" that can come in from keyboard events.\n            return ch.length === 1;\n        }\n    }\n\n    is_empty() { return this.text.length === 0; }\n\n    // Create an Expr for this accumulator assuming it's finished.\n    // Returns null if empty.\n    finished_expr() {\n        const text = this.text.trim();\n        if(text.length === 0) return null;\n        switch(this.accumulator_type) {\n        case 'latex': return new CommandExpr(text);\n        case 'text': return new TextExpr(this._latex_escape(text));\n        default: return null;\n        }\n    }\n\n    // TODO: may want to make this a general utility method, but it's only used here so far.\n    _latex_escape(text) {\n        const replacements = {\n            '_': \"\\\\_\",\n            '^': \"\\\\wedge\",\n            '%': \"\\\\%\",\n            \"'\": \"\\\\prime\",\n            \"`\": \"\\\\backprime\",\n            ' ': \"\\\\,\",\n            '$': \"\\\\$\",\n            '&': \"\\\\&\",\n            '#': \"\\\\#\",\n            '}': \"\\\\}\",\n            '{': \"\\\\{\",\n            '~': \"\\\\sim\",\n            \"\\\\\": \"\\\\backslash\",\n        };\n        return text.replaceAll(/[_^%'` $&#}{~\\\\]/g, match => replacements[match]);\n    }\n\n    emit_latex(emitter) {\n        emitter.expr(this._to_display_expr());\n    }\n\n    // Return an Expr used to display this accumulator while it's being edited.\n    _to_display_expr() {\n        switch(this.accumulator_type) {\n        case 'latex':\n            return new SequenceExpr([\n                new CommandExpr('backslash'),\n                new CommandExpr('mathrm', [\n                    this.is_empty() ? new CommandExpr('thinspace') : new TextExpr(this._latex_escape(this.text))\n                ])]);\n        case 'text':\n            return new CommandExpr('boxed', [\n                new SequenceExpr([\n                    new CommandExpr('vphantom', [new TextExpr('I')]),\n                    this.is_empty() ? new CommandExpr(',') : new TextExpr(this._latex_escape(this.text))\n                ])]);\n        default:\n            return new TextExpr('???');\n        }\n    }\n}\n\n\n// Represents an entry in the stack or document.\nclass Item {\n    // Used for React collection keys.  Each entry in a React component list is\n    // supposed to have a unique ID.\n    // NOTE: iOS Safari doesn't seem to like static variables like this?\n    // As a workaround, this will be initialized after the class definition instead.\n    //static serial_number = 1;\n    static next_serial() { return Item.serial_number++; }\n\n    static from_json(json) {\n        switch(json.item_type) {\n        case 'expr': return new ExprItem(\n            Expr.from_json(json.expr),\n            json.tag_expr ? Expr.from_json(json.tag_expr) : null);\n        case 'markdown':\n            return new MarkdownItem(json.source_text);\n        default:\n            return new MarkdownItem('invalid item type ' + json.item_type);\n        }\n    }\n\n    // Create an appropriate Item subclass instance for the given string.\n    // If string is wrapped in $$ pairs, it's treated as an ExprItem containing raw LaTeX code.\n    // Otherwise, it's treated as Markdown text.\n    static from_string(string) {\n        string = (string || '').trim();\n        // NOTE: .slice(2) here is to avoid pathological cases '$$', '$$$'\n        if(string.startsWith('$$') && string.slice(2).endsWith('$$')) {\n            const latex = string.slice(2, -2);\n            return new ExprItem(new TextExpr(latex));\n        }\n        else\n            return new MarkdownItem(string);\n    }\n    \n    constructor() {\n        this.serial = Item.next_serial();\n    }\n\n    react_key(prefix) { return prefix + '_' + this.serial; }\n\n    // Subclasses need to override these:\n    item_type() { return '???'; }\n    to_json() { return {}; }\n    to_text() { return '???'; }\n}\n\n// iOS Safari workaround\nItem.serial_number = 1;\n\n\n// Represents a math expression (Expr instance) in the stack or document.\nclass ExprItem extends Item {\n    // tag_expr is an optional tag shown to the right of the item.\n    constructor(expr, tag_expr) {\n        super()\n        this.expr = expr;\n        this.tag_expr = tag_expr;\n    }\n\n    item_type() { return 'expr'; }\n\n    to_json() {\n        let json = {item_type: 'expr', expr: this.expr.to_json()};\n        if(this.tag_expr) json.tag_expr = this.tag_expr.to_json();\n        return json;\n    }\n\n    to_text() { return this.expr.to_text(); }\n}\n\n\n// Represents a Markdown text object in the stack or document.\nclass MarkdownItem extends Item {\n    constructor(source_text) {\n        super();\n        this.source_text = source_text;\n        // this.setup_tokenizer();\n        this.rendered_html = this.render_markdown(this.source_text);\n    }\n\n    is_empty() { return this.source_text.trim().length === 0; }\n\n    render_markdown(source_text) {\n        // Replace $ by ` before sending it to Marked.\n        // This isn't ideal but the custom tokenizer code below doesn't seem to work.\n        source_text = source_text.replaceAll('$', '`');\n        return marked.parse(source_text);\n    }\n\n    // TODO: this doesn't work even though it's what's in the documentation\n    // setup_tokenizer() {\n    //  if(MarkdownItem.tokenizer_initialized) return;\n    //  const tokenizer = {\n    //      codespan(src) {\n    //          const match = src.match(/\\$+([^\\$\\n]+?)\\$+/);\n    //          if (match) {\n    //              return {\n    //                  type: 'codespan',\n    //                  raw: match[0],\n    //                  text: match[1].trim()\n    //              };\n    //          }\n    //          return false;\n    //      }\n    //  };\n    //  marked.use({tokenizer});\n    //  MarkdownItem.tokenizer_initialized = true;\n    // }\n\n    item_type() { return 'markdown'; }\n\n    to_json() {\n        return {item_type: 'markdown', source_text: this.source_text};\n    }\n\n    // TODO: convert Markdown syntax to something LaTeX-compatible\n    to_text() { return this.source_text; }\n}\n\n\n// NOTE: All stack operations return a new Stack with the modified\n// items, leaving the original untouched.\nclass Stack {\n    static from_json(json) {\n        const items = json.items.map(item_json => Item.from_json(item_json));\n        return new Stack(items);\n    }\n    \n    constructor(items) {\n        this.items = items;\n    }\n\n    depth() { return this.items.length; }\n    check(n) { return this.depth() >= n; }\n\n    // Check that at least n items are available and that they are all ExprItems\n    check_exprs(n) {\n        if(!this.check(n)) return false;\n        for(let i = 0; i < n; i++)\n            if(this.items[this.items.length-1-i].item_type() !== 'expr')\n                return false;\n        return true;\n    }\n\n    // Fetch item at position n (stack top = 1, next = 2, etc)\n    peek(n) {\n        if(!this.check(1)) this.underflow();\n        return this.items[this.items.length - n];\n    }\n\n    // Returns [new_stack, item1, item2, ...]\n    pop(n) {\n        if(n === undefined) n = 1;\n        if(!this.check(n)) this.underflow();\n        return this._unchecked_pop(n);\n    }\n\n    // Like pop(n) but all the items have to be ExprItems.\n    pop_exprs(n) {\n        if(!this.check(n)) this.underflow();\n        if(!this.check_exprs(n)) this.type_error();\n        const [new_stack, ...items] = this._unchecked_pop(n);\n        return [new_stack, ...items.map(item => item.expr)];\n    }\n\n    // n >= 1\n    pop_positive_integer() {\n        const [new_stack, expr] = this.pop_exprs(1);\n        if(expr.expr_type() === 'text') {\n            const value = parseInt(expr.text);\n            if(value >= 1) return [new_stack, value];\n        }\n        this.type_error();\n    }\n\n    pop_matrices(n) {\n        const [new_stack, ...exprs] = this.pop_exprs(n);\n        if(exprs.every(expr => expr.expr_type() === 'array' && expr.is_matrix()))\n            return [new_stack, ...exprs];\n        else\n            this.type_error();\n    }\n\n    _unchecked_pop(n) {\n        return [new Stack(this.items.slice(0, -n))].concat(this.items.slice(-n));\n    }\n    \n    push_all(items) {\n        if(!items.every(item => item instanceof Item))\n            throw new Error('pushing invalid item onto stack');\n        return new Stack(this.items.concat(items));\n    }\n    \n    push_all_exprs(exprs) { return this.push_all(exprs.map(expr => new ExprItem(expr))); }\n    push(item) { return this.push_all([item]); }\n    push_expr(expr) { return this.push_all_exprs([expr]); }\n\n    underflow() { throw new Error('stack_underflow'); }\n    type_error() { throw new Error('stack_type_error'); }\n\n    to_json() {\n        return {\n            object_type: 'stack',\n            items: this.items.map(item => item.to_json())\n        };\n    }\n}\n\n\nclass Document {\n    static from_json(json) {\n        return new Document(\n            json.items.map(item_json => Item.from_json(item_json)),\n            json.selection_index || 0);\n    }\n\n    // NOTE: selection_index can be in the range 0..items.length (inclusive).\n    constructor(items, selection_index) {\n        this.items = items || [];\n        this.selection_index = selection_index;\n    }\n\n    selected_item() {\n        if(this.selection_index > 0)\n            return this.items[this.selection_index-1];\n        else\n            return null;\n    }\n\n    // Insert a new item below the current selection, and select the inserted item.\n    // Returns a modified Document; does not alter this one.\n    insert_item(new_item) {\n        const index = this.selection_index;\n        const new_items = this.items.slice(0, index).concat([new_item], this.items.slice(index));\n        return new Document(new_items, index+1);\n    }\n\n    // Return the new Document if the selection was deleted successfully.\n    // Selects the item that was before this one (or select the 'document top' if this was the first).\n    // Return null if the selection is \"invalid\" (e.g., empty document).\n    delete_selection() {\n        const index = this.selection_index;\n        if(index > 0) {\n            const new_items = this.items.slice(0, index-1).concat(this.items.slice(index));\n            return new Document(new_items, index-1);\n        }\n        else\n            return null;\n    }\n\n    move_selection_by(offset) {\n        let new_index = this.selection_index + offset;\n        if(new_index < 0) new_index = 0;\n        if(new_index > this.items.length) new_index = this.items.length;\n        return new Document(this.items, new_index);\n    }\n\n    // If there is a current selection, move it by the given offset.\n    // Returns the changed document if anything was done.\n    shift_selection_by(offset) {\n        const item = this.selected_item();\n        if(!item ||\n           this.selection_index + offset <= 0 ||\n           this.selection_index + offset > this.items.length)\n            return null;\n        else\n            return this.delete_selection().move_selection_by(offset).insert_item(item);\n    }\n\n    to_json() {\n        return {\n            object_type: 'document',\n            items: this.items.map(item => item.to_json()),\n            selection_index: this.selection_index\n        };\n    }\n\n    to_text() {\n        return this.items.map(item => item.to_text()).join(\"\\n\\n\");\n    }\n}\n\n\nexport {\n    Keymap, Settings, AppState, UndoStack, DocumentStorage, ImportExportState, FileManagerState,\n    Expr, CommandExpr, PrefixExpr, InfixExpr, DeferExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    AccumulatorExpr, Item, ExprItem, MarkdownItem, Stack, Document\n};\n\n","\nimport {\n    /*Settings, */ AppState,\n    Expr, CommandExpr, PrefixExpr, InfixExpr, DeferExpr, TextExpr, SequenceExpr,\n    DelimiterExpr, SubscriptSuperscriptExpr, ArrayExpr,\n    AccumulatorExpr,\n    Item, ExprItem, MarkdownItem, Stack /*, Document*/\n} from './Models';\n\n\n// This acts as a sort of extension to the main App component.\n// TODO: rename -> EditorActions or something\nclass InputContext {\n    constructor(app_component, settings) {\n        this.app_component = app_component;\n        this.mode = 'base';\n        this.new_mode = null;\n        this.new_document = null;\n        this.files_changed = false;\n        this.file_saved = false;\n        this.settings = settings;\n\n        // If set, this will be displayed as a transient notification in\n        // the stack area.  Cleared after every keypress.\n        this.notification_text = null;\n\n        // Special indicator to help control the undo stack:\n        //    null - save state to undo stack after this action as normal\n        //    'undo' - request an undo\n        //    'redo' - request a redo of saved undo states\n        //    'suppress' - perform action as normal, but don't save state to the undo state\n        //                 (used for 'minor' actions that don't warrant undo tracking)\n        //    'clear' - undo stack will be reset (e.g. when loading a new document)\n        this.perform_undo_or_redo = null;\n\n        // Tracks minieditor state for editing the stack-top.\n        this.minieditor = {active: false};\n\n        // Tracks multi-part custom_delimiters commands\n        this.custom_delimiters = {};\n    }\n\n    // Returns [was_handled, new_app_state]\n    // NOTE: was_handled just indicates that a keybinding was found; it doesn't necessarily mean\n    // that the command succeeded without error.\n    handle_key(app_state, key) {\n        if(key === 'Shift' || key === 'Alt' || key === 'Control')\n            return [false, app_state];\n\n        // Special case: if stack top is an AccumulatorExpr, make sure we're in 'accumulate' input mode.\n        if(app_state.stack.depth() > 0 && app_state.stack.peek(1).item_type() === 'expr' &&\n           app_state.stack.peek(1).expr.expr_type() === 'accumulator')\n            this.mode = 'accumulate';\n\n        // If the popup panel is active, always use its dedicated keymap.\n        const effective_mode = this.settings.popup_mode || this.mode;\n        const command = this.settings.current_keymap.lookup_binding(effective_mode, key);\n        if(command) {\n            this.last_keypress = key;\n            const new_app_state = this.process_command(command, app_state);\n            return [true, new_app_state || app_state];\n        }\n        else\n            return [false, app_state];\n    }\n\n    // Returns the new AppState, or null if anything failed.\n    process_command(command, app_state) {\n        // Command strings are of the form:\n        //   'piece1;piece2;piece3'\n        // where the pieces are subcommands to be executed as a batch.\n        // Each piece in turn is a space-separated list where the first item\n        // is the command name and the remainder are arguments to the command.\n        // To put a literal semicolon into a command, write out 'semicolon'.\n        const commands = command.split(';').map(\n            piece => piece.split(' ').map(\n                token => token.replaceAll('semicolon', ';')));\n        return this.process_command_batch(commands, app_state);\n    }\n\n    // Process a batch of commands as a unit, returning the new AppState (or null if any of them failed).\n    // Each command is of the form [command_name, param1, param2, ...]\n    process_command_batch(commands, app_state) {\n        this.perform_undo_or_redo = null;\n        for(let i = 0; i < commands.length; i++) {\n            const [command_name, ...parameters] = commands[i];\n            const handler_function = this['do_' + command_name];\n            if(!handler_function)\n                return null;\n            try {\n                // Set up context variables for the handler functions to use:\n                this.app_state = app_state;\n\n                // TODO: maybe have this.changed.mode, this.changed.document etc.\n\n                // Watch to see if the handler sets new_mode.  If it does, switch to that\n                // mode after the command is finished, but otherwise switch back to base mode.\n                this.new_mode = null;\n\n                // The handler function will set this if the document changes.\n                // (Stack changes are expected to be returned by the handler function.)\n                this.new_document = null;\n\n                // Likewise this will be set to true if anything changed about the file list / file selection.\n                this.files_changed = false;  // TODO: rename -> selected_file_changed\n\n                // This will be set to true if the current file was saved by this action.\n                // This indicates that the app state's dirty flag should be cleared.\n                this.file_saved = false;\n\n                this.notification_text = null;\n\n                // Execute the handler and assemble the new state.\n                const new_stack = (handler_function.bind(this))(app_state.stack, ...parameters);\n                let new_app_state = new AppState(\n                    new_stack || app_state.stack,\n                    this.new_document || app_state.document\n                );\n                new_app_state.is_dirty = app_state.is_dirty || !new_app_state.same_as(app_state);\n                if(this.file_saved)  // Current file was saved; explicitly clear the dirty flag.\n                    new_app_state.is_dirty = false;\n                app_state = new_app_state;\n\n                // Switch back into base mode if the mode was not explicitly set by the handler.\n                this.mode = this.new_mode || 'base';\n            } catch(e) {\n                if(e.message === 'stack_underflow' || e.message === 'stack_type_error') {\n                    this.error_flash_stack();\n                    this.perform_undo_or_redo = null;\n                    this.mode = 'base';\n                    return null;\n                }\n                else throw e;\n            }\n            finally {\n                // Avoid holding references longer than needed.\n                this.app_state = null;\n                this.new_document = null;\n            }\n        }\n        return app_state;\n    }\n\n    switch_to_mode(new_mode) {\n        this.new_mode = new_mode;\n    }\n\n    error_flash_element(dom_element) {\n        dom_element.classList.remove('errorflash');\n        // eslint-disable-next-line no-unused-expressions\n        dom_element.offsetWidth;  // force reflow\n        dom_element.classList.add('errorflash');\n    }\n    error_flash_stack() { return this.error_flash_element(document.getElementById('stack_panel')); }\n    error_flash_document() { return this.error_flash_element(document.getElementById('document_panel')); }\n    clear_all_flashes() {\n        const elt_ids = ['stack_panel', 'document_panel'];\n        for(let elt_id = 0; elt_id < elt_ids.length; elt_id++) {\n            let elt = document.getElementById(elt_ids[elt_id]);\n            elt.classList.remove('errorflash');\n        }\n    }\n\n    notify(text) { this.notification_text = text; }\n\n    // If the base already has a subscript, and is_superscript is true, the superscript\n    // is placed into the existing base.  Otherwise, a new subscript/superscript node\n    // is created.  A similar rule applies if is_superscript is false.\n    _build_subscript_superscript(base_expr, child_expr, is_superscript) {\n        // Check to see if we can slot the child into an empty sub/superscript \"slot\".\n        if(base_expr.expr_type() === 'subscriptsuperscript' &&\n           ((base_expr.subscript_expr === null && !is_superscript) ||\n            (base_expr.superscript_expr === null && is_superscript))) {\n            // There's \"room\" for it in this expr.\n            return new SubscriptSuperscriptExpr(\n                base_expr.base_expr,\n                (is_superscript ? base_expr.subscript_expr : child_expr),\n                (is_superscript ? child_expr : base_expr.superscript_expr));\n        }\n        else {\n            // Create a new expr instead.  The base will be parenthesized if\n            // it's a low-precedence infix expression.\n            base_expr = DelimiterExpr.autoparenthesize(base_expr);\n            return new SubscriptSuperscriptExpr(\n                base_expr,\n                (is_superscript ? null : child_expr),\n                (is_superscript ? child_expr : null));\n        }\n    }\n\n    // Second-to-top stack item becomes the base, while the stack top becomes the\n    // subscript or superscript depending on 'is_superscript'.\n    make_subscript_superscript(stack, is_superscript) {\n        const [new_stack, base_expr, child_expr] = stack.pop_exprs(2);\n        const new_expr = this._build_subscript_superscript(base_expr, child_expr, is_superscript);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_subscript(stack) { return this.make_subscript_superscript(stack, false); }\n    do_superscript(stack) { return this.make_subscript_superscript(stack, true); }\n\n    // Add a \\prime to the stack top; this is almost like do_superscript with \\prime\n    // but needs some special handling to coalesce multiple \\prime into a single superscript.\n    do_prime(stack) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        const new_prime_expr = new CommandExpr('prime', []);\n\n        // Check whether the base expr is already of the form x^{\\prime}, x^{\\prime\\prime}, etc.\n        // If so, add an extra \\prime into the superscript.\n        if(base_expr.expr_type() === 'subscriptsuperscript' && base_expr.superscript_expr) {\n            const s = base_expr.superscript_expr;\n            const is_prime_command = expr =>\n                  expr.expr_type() === 'command' &&\n                  expr.operand_count() === 0 && expr.command_name === 'prime';\n            let new_superscript_expr;\n            if(is_prime_command(s))\n                new_superscript_expr = new SequenceExpr([s, new_prime_expr]);\n            else if(s.expr_type() === 'sequence' && s.exprs.every(is_prime_command))\n                new_superscript_expr = new SequenceExpr(s.exprs.concat([new_prime_expr]));\n            else\n                new_superscript_expr = null;\n            if(new_superscript_expr) {\n                const new_expr = new SubscriptSuperscriptExpr(\n                    base_expr.base_expr, base_expr.subscript_expr, new_superscript_expr);\n                return new_stack.push_expr(new_expr);\n            }\n        }\n\n        // Otherwise, adding a prime works just like adding a \\prime superscript.\n        const new_expr = this._build_subscript_superscript(base_expr, new_prime_expr, true);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_mode(stack, new_mode) { this.switch_to_mode(new_mode); }\n\n    do_undo() { this.perform_undo_or_redo = 'undo'; }\n    do_redo() { this.perform_undo_or_redo = 'redo'; }\n\n    do_dup(stack) {\n        const [new_stack, item] = stack.pop(1);\n        return new_stack.push_all([item, item]);\n    }\n    do_pop(stack) {\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, popped_item] = stack.pop(1);\n        return new_stack;\n    }\n    // a b -> b\n    do_nip(stack) {\n        // eslint-disable-next-line no-unused-vars\n        const [new_stack, a, b] = stack.pop(2);\n        return new_stack.push(b);\n    }\n    do_swap(stack) {\n        const [new_stack, a, b] = stack.pop(2);\n        return new_stack.push_all([b, a]);\n    }\n    // a b -> b a b\n    do_tuck(stack) {\n        const [new_stack, a, b] = stack.pop(2);\n        return new_stack.push_all([b, a, b]);\n    }\n    // a b -> a b a\n    do_over(stack) {\n        const [new_stack, a, b] = stack.pop(2);\n        return new_stack.push_all([a, b, a]);\n    }\n    // a b c -> b c a\n    do_rot(stack) {\n        const [new_stack, a, b, c] = stack.pop(3);\n        return new_stack.push_all([b, c, a]);\n    }\n    // a b c -> c a b\n    do_unrot(stack) {\n        const [new_stack, a, b, c] = stack.pop(3);\n        return new_stack.push_all([c, a, b]);\n    }\n    // a_1 a_2 ... a_n N -> a_n ... a_2 a_1\n    do_reverse_n(stack) {\n        const [new_stack, item_count] = stack.pop_positive_integer();\n        const [new_stack_2, ...items] = new_stack.pop(item_count);\n        items.reverse();\n        return new_stack_2.push_all(items);\n    }\n    do_reverse_all(stack) {\n        const [new_stack, ...items] = stack.pop(stack.depth());\n        items.reverse();\n        return new_stack.push_all(items);\n    }\n    do_clear_stack() {\n        return new Stack([]);\n    }\n\n    do_change_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        this.new_document = this.app_state.document.move_selection_by(amount);\n        // this.perform_undo_or_redo = 'suppress';\n    }\n\n    do_shift_document_selection(stack, amount_string) {\n        const amount = parseInt(amount_string);\n        const new_document = this.app_state.document.shift_selection_by(amount);\n        if(new_document)\n            this.new_document = new_document;\n        else\n            this.error_flash_document();\n    }\n\n    do_save_file(stack) {\n        const file_manager_state = this.app_component.state.file_manager_state;\n        const filename = file_manager_state.current_filename;\n        if(!filename)\n            return this.do_save_file_as(stack);\n        this.app_component.state.document_storage.save_state(\n            this.app_state, filename,\n            () => {\n                this.notify('Saved: ' + filename);\n                this.settings.last_opened_filename = filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving:' + filename)\n        );\n        this.file_saved = true;\n    }\n\n    // TODO: factor with do_save_file\n    do_save_file_as(stack) {\n        let new_filename = window.prompt('Enter the filename to save as', this.settings.current_filename);\n        if(!new_filename)\n            return;\n        let document_storage = this.app_component.state.document_storage;\n        new_filename = document_storage.sanitize_filename(new_filename);\n        document_storage.save_state(\n            this.app_state, new_filename,\n            () => {\n                this.notify('Saved as: ' + new_filename);\n                let file_manager_state = this.app_component.state.file_manager_state;\n                file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.perform_undo_or_redo = 'clear';\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error saving: ' + new_filename)\n        );\n        this.file_saved = true;\n    }\n\n    do_load_selected_file(stack) {\n        const selected_filename = this.app_component.state.file_manager_state.selected_filename;\n        if(!selected_filename)\n            return this.error_flash_document();\n\n        // Save current document first.\n        // TODO: This creates a bit of a race condition, may want to revisit.\n        this.do_save_file(stack);\n        \n        this.app_component.start_loading_filename(selected_filename);\n    }\n\n    do_start_new_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        let new_filename = file_manager_state.generate_unused_filename(file_manager_state.current_filename || 'untitled');\n        new_filename = window.prompt('Enter a filename for the new document', new_filename);\n        if(!new_filename) return;\n        new_filename = document_storage.sanitize_filename(new_filename || '');\n        if(!new_filename) {\n            alert('Invalid filename (must only contain letters, numbers and underscores)');\n            return;\n        }\n\n        // Save the current document if needed first.\n        if(file_manager_state.current_filename) {\n            // NOTE: don't put up the notification flash here, unlike with an explicit save_document.\n            document_storage.save_state(this.app_state, file_manager_state.current_filename);\n        }\n\n        // This basically works like loading from a blank file.\n        let new_state = new AppState();\n\n        // Start the document with a default header showing the filename.\n        this.new_document = new_state.document.insert_item(new MarkdownItem('# ' + new_filename));\n        file_manager_state.selected_filename = file_manager_state.current_filename = new_filename;\n        this.settings.last_opened_filename = new_filename;\n        this.settings.save();\n        this.perform_undo_or_redo = 'clear';\n        this.notify('Started new file: ' + new_filename);\n        this.files_changed = true;\n        this.file_saved = true;\n        this.do_toggle_popup(new_state.stack, 'files');  // close file manager\n        return new_state.stack;\n    }\n\n    do_select_adjacent_file(stack, offset_string) {\n        const offset = parseInt(offset_string);\n        let file_manager_state = this.app_component.state.file_manager_state;\n        const new_filename = file_manager_state.find_adjacent_filename(file_manager_state.selected_filename, offset);\n        if(new_filename) {\n            file_manager_state.selected_filename = new_filename;\n            this.files_changed = true;\n        }\n    }\n\n    do_delete_selected_file(stack) {\n        let file_manager_state = this.app_component.state.file_manager_state;\n        let document_storage = this.app_component.state.document_storage;\n        const filename = file_manager_state.selected_filename;\n        if(!filename) return this.error_flash_document();\n        if(!window.confirm(\"Really delete \\\"\" + filename + \"\\\"?\")) return;\n        document_storage.delete_state(\n            filename,\n            () => {\n                this.notify('Deleted: ' + filename);\n                const new_filename = file_manager_state.find_adjacent_filename(filename, 1);\n                // TODO: might need this.files_changed = true\n                file_manager_state.selected_filename = new_filename;\n                this.settings.last_opened_filename = new_filename;\n                this.settings.save();\n                this.app_component.request_file_list();\n            },\n            () => this.notify('Error deleting: ' + filename)\n        );\n    }\n\n    do_pop_to_document(stack, arg) {\n        const [new_stack, item] = stack.pop(1);\n        this.new_document = this.app_state.document.insert_item(item);\n        return new_stack;\n    }\n\n    do_copy_to_document(stack, arg) {\n        const item = stack.peek(1);\n        this.new_document = this.app_state.document.insert_item(item);\n    }\n\n    do_recall_from_document(stack, arg) {\n        const item = this.app_state.document.selected_item();\n        if(item)\n            return stack.push(item);\n        else\n            this.error_flash_document();\n    }\n\n    do_extract_from_document(stack, arg) {\n        const item = this.app_state.document.selected_item();\n        if(item) {\n            this.new_document = this.app_state.document.delete_selection();\n            return stack.push(item);\n        }\n        else\n            this.error_flash_document();\n    }\n\n    do_edit_stack_top(stack) {\n        const item = stack.peek(1);\n        let source_text;\n        switch(item.item_type()) {\n        case 'markdown': source_text = item.source_text; break;\n        case 'expr': source_text = ['$$', item.expr.to_latex(), '$$'].join(''); break;\n        default: source_text = '???'; break;\n        }\n        this.switch_to_mode('editor');\n        this.minieditor = {active: true, text: source_text};\n    }\n\n    // Start editing a new blank item on the stack.\n    do_edit_new_item(stack) {\n        const new_stack = this.do_insert_markdown(stack, '');\n        this.do_edit_stack_top(new_stack);\n        return new_stack;\n    }\n\n    // Pull the item below the stack top (i.e. below the item currently being edited)\n    // into the current editor.\n    // If the imported item is a Markdown item, its text is integrated directly;\n    // otherwise an inline LaTeX fragment is created.\n    do_import_item_into_editor(stack) {\n        this.switch_to_mode('editor');\n        const [new_stack, item, edited_item] = stack.pop(2);\n        let inserted_text;\n        switch(item.item_type()) {\n        case 'markdown': inserted_text = item.source_text; break;\n        case 'expr': inserted_text = '$' + item.expr.to_latex() + '$'; break;\n        default: inserted_text = '???'; break;\n        }\n        this._insert_text_into_minieditor(inserted_text);\n        return new_stack.push(edited_item);\n    }\n\n    // Attempt to insert a text string into the active minieditor.\n    _insert_text_into_minieditor(text) {\n        if(!this.minieditor.active) return false;\n        let editor_elt = this.minieditor.ref.current;\n        if(!editor_elt) return false;\n        if(editor_elt.setRangeText)\n            editor_elt.setRangeText(text, editor_elt.selectionStart, editor_elt.selectionEnd, \"end\");\n        else {\n            // Fallback method for older browsers\n            editor_elt.focus();\n            document.execCommand('insertText', false, text);\n        }\n        return true;\n    }\n\n    do_finish_editing(stack) {\n        if(!this.minieditor.active) return;\n        let editor_elt = this.minieditor.ref.current;\n        const content = ((editor_elt ? editor_elt.value : null) || '').trim();\n        const [new_stack, old_item] = stack.pop(1);\n        this.minieditor = {active: false};\n        if(content.length > 0) {\n            const new_item = Item.from_string(content);\n            // If no textual changes were made to an Expr, just keep the old one instead of\n            // building a new TextExpr.  This preserves any expression structure that was there.\n            if(new_item.item_type() === 'expr' && old_item.item_type() === 'expr' &&\n               old_item.expr.to_latex() === new_item.expr.to_latex())\n                return new_stack.push(old_item);\n            else\n                return new_stack.push(Item.from_string(content));\n        }\n        else\n            return new_stack;\n    }\n\n    do_cancel_editing(stack) {\n        const [new_stack, old_item] = stack.pop(1);\n        this.minieditor = {active: false};\n\n        // If the item that was being edited was an empty Markdown item, drop it from the stack now.\n        // Otherwise, leave it untouched.\n        if(old_item.item_type() === 'markdown' && old_item.is_empty())\n            return new_stack;\n        else \n            return new_stack.push(old_item);\n    }\n\n    do_insert_markdown(stack, text) {\n        return stack.push(new MarkdownItem(text));\n    }\n\n    do_insert(stack, text) {\n        // TODO: handle this better\n        text = text || '';  // handle 'insert nothing' case\n        if(text.startsWith(\"\\\\\"))\n            return stack.push_expr(new CommandExpr(text.slice(1)));\n        else\n            return stack.push_expr(new TextExpr(text));\n    }\n\n    do_self_insert(stack) {\n        return this.do_insert(stack, this.last_keypress);\n    }\n\n    do_insert_defer(stack) {\n        return stack.push_expr(new DeferExpr());\n    }\n\n    // Used for \\mathscr / \\mathcal, which only have uppercase glyphs.\n    // case_type: 'uppercase', 'lowercase'\n    // Stack top can be a ExprItem with a simple TextExpr, or else a MarkdownItem.\n    do_to_case(stack, case_type) {\n        const convert_fn = string => {\n            switch(case_type) {\n            case 'uppercase': return string.toUpperCase();\n            case 'lowercase': return string.toLowerCase();\n            default: return string;\n            }\n        };\n        const [new_stack, item] = stack.pop(1);\n        switch(item.item_type()) {\n        case 'markdown':\n            return new_stack.push(new MarkdownItem(convert_fn(item.source_text)));\n        case 'expr':\n            {   let new_expr;\n                if(item.expr.expr_type() === 'text')\n                    new_expr = new TextExpr(convert_fn(item.expr.text));\n                else new_expr = item.expr;\n                return new_stack.push_expr(new_expr);\n            }\n        default:\n            return stack.type_error();\n        }\n    }\n\n    // Pop arity_string items (default 1) and turn them into an Command expr.\n    do_operator(stack, opname, arity_string = '1') {\n        const arity = parseInt(arity_string);\n        const [new_stack, ...popped_exprs] = stack.pop_exprs(arity);\n        const result_expr = new CommandExpr(opname, popped_exprs)\n        return new_stack.push_expr(result_expr);\n    }\n\n    // \\sin{x} etc.  Works similarly to do_operator except the argument is autoparenthesized.\n    // If superscript_text is given, the text is applied as a superscript to the function\n    // itself (not to the argument).\n    do_named_function(stack, funcname, superscript_text) {\n        let [new_stack, arg_expr] = stack.pop_exprs(1);\n        const orig_funcname = funcname;\n        if(superscript_text !== undefined) {\n            // \\sin^2{arg} etc.  This is a little awkward because the \"head\" of the command (\\sin^2) is\n            // no longer a simple LaTeX command like other CommandExprs.  Fortunately, things work out fine\n            // treating it as such by just textually concatenating the superscript (putting in explicit braces\n            // if necessary).  For example: \"sin^2\" or \"sin^{-1}\".\n            if(superscript_text.length > 1)\n                superscript_text = '{' + superscript_text + '}';\n            funcname = funcname + '^' + superscript_text;\n        }\n        arg_expr = DelimiterExpr.autoparenthesize(arg_expr);\n\n        // \\sech and \\csch are are missing in LaTeX for some reason so they need to be special cased here.\n        let expr;\n        if(orig_funcname === 'sech' || orig_funcname === 'csch')\n            expr = new CommandExpr('operatorname', [new TextExpr(funcname), arg_expr]);\n        else\n            expr = new CommandExpr(funcname, [arg_expr]);\n\n        return new_stack.push_expr(expr);\n    }\n\n    // Same as do_operator, except if the object the hat is being added to is a literal 'i' or 'j',\n    // or bolded i/j, it's first converted into a \\imath or \\jmath to remove the dot.\n    do_apply_hat(stack, hat_op) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        if(expr.expr_type() === 'text' &&\n           (expr.text === 'i' || expr.text === 'j'))\n            expr = new CommandExpr(expr.text === 'i' ? 'imath' : 'jmath');\n        else if(expr.expr_type() === 'command' && expr.operand_count() === 1 &&\n                (expr.command_name === 'boldsymbol' || expr.command_name === 'mathbf')) {\n            const inner_expr = expr.operand_exprs[0];\n            if(inner_expr.expr_type() === 'text' &&\n               (inner_expr.text === 'i' || inner_expr.text === 'j'))\n                expr = new CommandExpr(\n                    expr.command_name,\n                    [new CommandExpr(inner_expr.text === 'i' ? 'imath' : 'jmath')]);\n        }\n        const result_expr = new CommandExpr(hat_op, [expr]);\n        return new_stack.push_expr(result_expr);\n    }\n\n    do_color(stack, colorname) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n\n        // Strip off any existing \\textcolor\n        if(expr.expr_type() === 'command' &&\n           expr.command_name === 'textcolor' && expr.operand_count() === 2)\n            expr = expr.operand_exprs[1];\n\n        const new_expr = new CommandExpr('textcolor', [new TextExpr(colorname), expr]);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_accumulate(stack, accumulate_type) {\n        this.switch_to_mode('accumulate');\n        this.perform_undo_or_redo = 'suppress';  // (minor action)\n        return stack.push_expr(new AccumulatorExpr(accumulate_type, ''));\n    }\n\n    do_custom_delimiter(stack, delimiter_type) {\n        this.switch_to_mode('custom_delimiters');\n        if(!delimiter_type) {\n            // Start new sequence\n            this.custom_delimiters = {arity: 1};\n            return;\n        }\n        if(!this.custom_delimiters.left) {\n            this.custom_delimiters.left = delimiter_type;\n            return;\n        }\n        if(!this.custom_delimiters.right) {\n            this.custom_delimiters.right = delimiter_type;\n            if(this.custom_delimiters.arity === 1)\n                return this._finish_custom_delimiters(stack);\n            else return;\n        }\n        this.custom_delimiters.middle = delimiter_type;\n        return this._finish_custom_delimiters(stack);\n    }\n\n    do_custom_delimiter_arity(stack, arity_string) {\n        this.switch_to_mode('custom_delimiters');\n        this.custom_delimiters.arity = parseInt(arity_string);\n    }\n\n    _finish_custom_delimiters(stack) {\n        this.switch_to_mode('base');\n        const d = this.custom_delimiters;\n        const [new_stack, ...exprs] = stack.pop_exprs(d.arity);\n        const new_expr = new DelimiterExpr(d.left, d.right, d.middle, exprs);\n        this.custom_delimiters = {};\n        return new_stack.push_expr(new_expr);\n    }\n\n    // opname can be either a \\latex_command or a regular string like '+'\n    do_infix(stack, opname) {\n        const [new_stack, left_expr, right_expr] = stack.pop_exprs(2);\n        let operator_expr;\n        if(opname.startsWith(\"\\\\\"))  // TODO: handle this better\n            operator_expr = new CommandExpr(opname.slice(1));\n        else\n            operator_expr = new TextExpr(opname);\n        return new_stack.push_expr(new InfixExpr(operator_expr, left_expr, right_expr));\n    }\n\n    // Similar to do_infix but only takes 1 item from the stack and makes a PrefixExpr.\n    do_prefix(stack, opname) {\n        const [new_stack, base_expr] = stack.pop_exprs(1);\n        let operator_expr;\n        if(opname.startsWith(\"\\\\\"))  // TODO: handle this better\n            operator_expr = new CommandExpr(opname.slice(1));\n        else\n            operator_expr = new TextExpr(opname);\n        return new_stack.push_expr(new PrefixExpr(base_expr, operator_expr));\n    }\n\n    // Same as do_infix(..., '+'/'-') but automatically converts to infix minus/plus if the\n    // right hand side starts with a unary -.\n    do_infix_plus_or_minus(stack, opname) {\n        let [new_stack, left_expr, right_expr] = stack.pop_exprs(2);\n        let operator_expr;\n        if(right_expr.expr_type() === 'prefix' &&\n           right_expr.prefix_expr.expr_type() === 'text' && right_expr.prefix_expr.text === '-') {\n            operator_expr = new TextExpr(opname === '-' ? '+' : '-');\n            right_expr = right_expr.base_expr;\n        }\n        else\n            operator_expr = new TextExpr(opname);\n        return new_stack.push_expr(new InfixExpr(operator_expr, left_expr, right_expr));\n    }\n\n    // Take an infix expression and another expression from the stack.\n    // Turn it into an \\overset or \\underset infix expression that stacks the expression\n    // above or below the original infix operator.\n    do_stackrel(stack, overset_op) {\n        const [new_stack, infix_expr, stacked_expr] = stack.pop_exprs(2);\n        if(infix_expr.expr_type() !== 'infix') {\n            this.error_flash_stack();\n            return;\n        }\n        const new_op_expr = new CommandExpr(overset_op, [stacked_expr, infix_expr.operator_expr]);\n        const new_expr = new InfixExpr(new_op_expr, infix_expr.left_expr, infix_expr.right_expr);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_cancel() {}\n\n    // Dummy 'command' to give explicit names to non-obvious commands for the keymap editor.\n    do_name() {}\n\n    // Concatenate two Exprs, or two Markdown texts.\n    // TODO: possibly allow Expr+Markdown too\n    do_concat(stack, concat_mode) {\n        let [new_stack, left_item, right_item] = stack.pop(2);\n        if(left_item.item_type() === 'expr' && right_item.item_type() === 'expr') {\n            let left_expr = left_item.expr, right_expr = right_item.expr;\n            if(concat_mode === 'autoparenthesize') {\n                // Parenthesize left and right arguments if they're low-precedence\n                // infix expressions.  e.g.:  x+y x-y -> (x+y)(x-y)\n                left_expr = DelimiterExpr.autoparenthesize(left_expr);\n                right_expr = DelimiterExpr.autoparenthesize(right_expr);\n            }\n            const new_expr = Expr.combine_pair(left_expr, right_expr);\n            return new_stack.push_expr(new_expr);\n        }\n        else if(left_item.item_type() === 'markdown' && right_item.item_type() === 'markdown') {\n            // TODO: maybe add a newline separator in between if needed.\n            const new_text = left_item.source_text + right_item.source_text;\n            return new_stack.push(new MarkdownItem(new_text));\n        }\n        else\n            return stack.type_error();\n    }\n\n    do_substitute_defer(stack) {\n        let [new_stack, original_expr, substitution_expr] = stack.pop_exprs(2);\n        const defer_expr = original_expr.find_defer();\n        if(defer_expr) {\n            const new_expr = original_expr.substitute_expr(defer_expr, substitution_expr);\n            return new_stack.push_expr(new_expr);\n        }\n        else\n            return stack.type_error();\n    }\n\n    do_append_text_input(stack) {\n        const key = this.last_keypress;\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr;\n        if(expr.expr_type() === 'accumulator') {\n            if(expr.is_valid_character(key))\n                new_expr = expr.with_extra_character(key);\n            else if(expr.accumulator_type === 'latex' && key === ' ') {\n                // Special case: Space key will finish latex accumulation.\n                return this.do_finish_text_input(stack);\n            }\n            else\n                new_expr = expr;\n        }\n        else\n            new_expr = expr;\n        this.switch_to_mode('accumulate');  // stay in text accumulation mode\n        this.perform_undo_or_redo = 'suppress';  // (minor action)\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_backspace_text_input(stack) {\n        this.switch_to_mode('accumulate');  // stay in text accumulation mode\n        this.perform_undo_or_redo = 'suppress';  // (minor action)\n        const [new_stack, expr] = stack.pop_exprs(1);\n        let new_expr;\n        if(expr.expr_type() === 'accumulator') {\n            if(expr.is_empty()) {\n                // Backspace on an already-empty accumulator just drops it from the stack.\n                this.switch_to_mode('base');\n                return new_stack;\n            }\n            new_expr = expr.without_last_character();\n        }\n        else\n            new_expr = expr;\n        return new_stack.push_expr(new_expr);\n    }\n\n    // If textstyle is supplied, apply the given text style to the entered text.\n    // (currently only \"roman\" allowed)\n    do_finish_text_input(stack, textstyle) {\n        const [new_stack, expr] = stack.pop_exprs(1);\n        if(expr.expr_type() === 'accumulator') {\n            let new_expr = expr.finished_expr();\n            if(!new_expr)\n                return new_stack;\n            if(textstyle === 'roman')\n                new_expr = new CommandExpr('mathrm', [new_expr]);\n            return new_stack.push_expr(new_expr);\n        }\n        else\n            return new_stack;  // shouldn't normally happen\n    }\n\n    // expr_count is the number of items to pop from the stack to put inside the delimiters.\n    // It defaults to 1, but if it's 2 or more, 'middle' is used to separate each item within\n    // the delimiters.\n    do_delimiters(stack, left, right, middle, expr_count_string) {\n        const expr_count = (expr_count_string === undefined) ? 1 : parseInt(expr_count_string);\n        const [new_stack, ...inner_exprs] = stack.pop_exprs(expr_count);\n        const new_expr = new DelimiterExpr(left, right, middle, inner_exprs);\n        return new_stack.push_expr(new_expr);\n    }\n\n    // Wrap stack top in parentheses if it's not already in delimiters.\n    do_parenthesize(stack) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n\n        // Special case: \\left. X \\middle| \\right. style delimiters\n        // are treated as a kind of pseudo-infix expression here.\n        // This is to make things like Pr(x | y) work better when | is a\n        // flex-size delimiter.\n        if(expr.expr_type() === 'delimiter' && expr.left_type === '.' &&\n           expr.right_type === '.' && expr.inner_exprs.length > 1)\n            expr = new DelimiterExpr('(', ')', expr.middle_type, expr.inner_exprs);\n        else if(expr.expr_type() !== 'delimiter')\n            expr = DelimiterExpr.parenthesize(expr);\n\n        return new_stack.push_expr(expr);\n    }\n\n    do_autoparenthesize(stack) {\n        let [new_stack, expr] = stack.pop_exprs(1);\n        return new_stack.push_expr(DelimiterExpr.autoparenthesize(expr));\n    }\n\n    // Combine arguments and command name from the stack into a CommandExpr\n    do_apply_operator(stack, arg_count_string) {\n        const arg_count = parseInt(arg_count_string);\n        const [new_stack, ...exprs] = stack.pop_exprs(arg_count+1);\n        const command_expr = exprs[exprs.length-1], operand_exprs = exprs.slice(0, arg_count);\n        if(command_expr.expr_type() === 'command' && command_expr.operand_count() === 0)\n            return new_stack.push_expr(\n                new CommandExpr(command_expr.command_name, operand_exprs));\n        else\n            this.error_flash_stack();\n    }\n\n    // Take (left, right, operator) from the stack and create an InfixExpr.\n    do_apply_infix(stack) {\n        const [new_stack, left_expr, right_expr, operator_expr] = stack.pop_exprs(3);\n        const new_expr = new InfixExpr(operator_expr, left_expr, right_expr);\n        return new_stack.push_expr(new_expr);\n    }\n\n    do_toggle_popup(stack, mode_string) {\n        // Hack: save help panel scroll position so we can restore it next\n        // time the help is displayed.\n        if(this.settings.popup_mode === 'help') {\n            const elt = document.getElementById('popup_panel');\n            if(elt && elt.scrollTop)\n                this.settings.help_scroll_top = elt.scrollTop;\n        }\n        \n        this.settings.popup_mode =\n            (this.settings.popup_mode === mode_string) ? null : mode_string;\n        this.settings.save();\n        this.app_component.apply_layout_to_dom();\n    }\n\n    // Set various configuration options.\n    do_config(stack, config_option, value) {\n        let settings = this.settings;\n        let layout = settings.layout;\n        switch(config_option) {\n        case 'zoom_factor':\n            switch(value) {\n            case '0': layout.zoom_factor = 0; break;\n            case '+': layout.zoom_factor++; break;\n            case '-': layout.zoom_factor--; break;\n            default: break;\n            }\n            break;\n        case 'math_align':\n            switch(value) {\n            case 'toggle_document':\n                layout.document_rightalign_math = !layout.document_rightalign_math;\n                break;\n            case 'toggle_stack':\n                layout.stack_rightalign_math = !layout.stack_rightalign_math;\n                break;\n            default:\n                break;\n            }\n            break;\n        case 'stack_side':\n            layout.stack_side = value;\n            break;\n        case 'stack_split':\n            layout.stack_split = parseInt(value);\n            break;\n        case 'theme':\n            settings.selected_theme = value;\n            break;\n        case 'reset_layout':\n            settings.layout = settings.default_layout();\n            break;\n        default:\n            break;\n        }\n        settings.save();\n        this.app_component.apply_layout_to_dom();\n        this.clear_all_flashes();\n    }\n\n    // item1, item2, ..., N => {item1, item2, ...}\n    do_build_matrix_row(stack, matrix_type) {\n        const [new_stack, expr_count] = stack.pop_positive_integer();\n        const [new_stack_2, ...exprs] = new_stack.pop_exprs(expr_count);\n        const matrix_expr = new ArrayExpr(\n            (matrix_type || 'bmatrix'),\n            1, expr_count,\n            [exprs]\n        );\n        return new_stack_2.push_expr(matrix_expr);\n    }\n\n    // Stack two ArrayExprs on top of each other.\n    // The type of the matrix on the stack-top takes precedence if there's a conflict.\n    // The two matrices have to have the same number of columns.\n    do_stack_matrices(stack) {\n        // TODO: allow stacking 'align' exprs, etc (where is_matrix isn't necessarily true)\n        const [new_stack, m1, m2] = stack.pop_matrices(2);\n        if(m1.column_count !== m2.column_count)\n            new_stack.type_error();\n        const new_array = new ArrayExpr(\n            m2.array_type,\n            m1.row_count + m2.row_count,\n            m1.column_count,\n            m1.element_exprs.concat(m2.element_exprs)\n        );\n        return new_stack.push_expr(new_array);\n    }\n\n    // Split an ArrayExpr into its component rows and put them on the stack.\n    do_split_matrix(stack) {\n        // TODO: allow non-matrix arrays here\n        const [new_stack, array_expr] = stack.pop_matrices(1);\n        return new_stack.push_all_exprs(array_expr.split_rows());\n    }\n\n    // Take apart an ArrayExpr and put all its elements on the stack (in row-major order).\n    do_dissolve_matrix(stack) {\n        // TODO: allow non-matrix arrays here\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        let dissolved_exprs = [].concat(...matrix_expr.element_exprs);\n        return new_stack.push_all_exprs(dissolved_exprs);\n    }\n\n    do_insert_matrix_ellipses(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.with_ellipses());\n    }\n\n    do_matrix_transpose(stack) {\n        const [new_stack, matrix_expr] = stack.pop_matrices(1);\n        return new_stack.push_expr(matrix_expr.transposed());\n    }\n\n    do_build_align(stack, align_type) {\n        // NOTE: if align_type = 'cases' or 'rcases', align on ':' infix if there is one, and then remove the infix\n        const [new_stack, expr_count] = stack.pop_positive_integer();\n        const [new_stack_2, ...exprs] = new_stack.pop_exprs(expr_count);\n\n        let split_mode;\n        switch(align_type) {\n        case 'gathered': case 'gather': split_mode = 'none'; break;\n        case 'cases': case 'rcases': split_mode = 'colon'; break;\n        default: split_mode = 'infix'; break;\n        }\n\n        const element_exprs = ArrayExpr.split_elements(exprs, split_mode)\n        const array_expr = new ArrayExpr(\n            align_type, element_exprs.length, element_exprs[0].length, element_exprs);\n        return new_stack_2.push_expr(array_expr);\n    }\n\n    // item1, item2, ..., N => \"item1, item2, ...\"\n    // (concatenate N items from the stack with separator_text between each one)\n    do_build_list(stack, separator_text, final_separator_text) {\n        const [new_stack, expr_count] = stack.pop_positive_integer();\n        const [new_stack_2, ...exprs] = new_stack.pop_exprs(expr_count);\n        let expr = exprs[0];\n        for(let i = 1; i < expr_count; i++) {\n            const s = (final_separator_text && i === expr_count-1) ? final_separator_text : separator_text;\n            expr = Expr.combine_pair(expr, new TextExpr(s));\n            expr = Expr.combine_pair(expr, exprs[i]);\n        }\n        return new_stack_2.push_expr(expr);\n    }\n\n    // Take [x_1,...,x_n, infix_operator, item_count] from the stack\n    // and build a nested InfixExpr.  'final_separator_text' is used as\n    // the next to last item if provided.\n    do_build_infix_list(stack, final_separator_text) {\n        const [new_stack, expr_count] = stack.pop_positive_integer();\n        const [new_stack_2, infix_operator_expr] = new_stack.pop_exprs(1);\n        const [new_stack_3, ...exprs] = new_stack_2.pop_exprs(expr_count);\n        let expr = exprs[expr_count-1];\n        if(final_separator_text && expr_count > 1)\n            expr = new InfixExpr(infix_operator_expr, new TextExpr(final_separator_text), expr);\n        for(let i = expr_count-2; i >= 0; i--)\n            expr = new InfixExpr(infix_operator_expr, exprs[i], expr);\n        return new_stack_3.push_expr(expr);\n    }\n\n    // Take [x_1, ..., x_n, item_count] from the stack and build\n    // a \\substack{...} command.  This \"cheats\" by converting the stacked items\n    // to LaTeX and concatenating with \\\\ so any structure in the stacked items\n    // will be lost, same as do_build_list(), etc.\n    do_build_substack(stack) {\n        const [new_stack, expr_count] = stack.pop_positive_integer();\n        const [new_stack_2, ...exprs] = new_stack.pop_exprs(expr_count);\n        const content = exprs.map(expr => expr.to_latex()).join(\"\\\\\\\\\");\n        const new_expr = new CommandExpr('substack', [new TextExpr(content)]);\n        return new_stack_2.push_expr(new_expr);\n    }\n\n    do_apply_tag(stack) {\n        let [new_stack, tagged_item, tag_item] = stack.pop(2);\n        if(tagged_item.item_type() !== 'expr')\n            return stack.type_error();\n        let tag_expr;\n        if(tag_item.item_type() === 'markdown')\n            tag_expr = new CommandExpr('text', [new TextExpr(tag_item.source_text.trim())]);\n        else if(tag_item.item_type() === 'expr')\n            tag_expr = tag_item.expr;\n        else\n            return stack.type_error();\n        return new_stack.push(new ExprItem(tagged_item.expr, tag_expr));\n    }\n\n    do_copy_to_clipboard(stack) {\n        const [new_stack, item] = stack.pop(1);\n        this.app_component.state.clipboard_item = item;\n        this.notify(\"Copied to clipboard\");\n        return new_stack.push(item);\n    }\n\n    do_paste_from_clipboard(stack) {\n        const item = this.app_component.state.clipboard_item;\n        if(item)\n            return stack.push(item);\n        else\n            this.error_flash_stack();\n    }\n\n    // screen_percentage=0 means try to scroll so that the top of the selection is flush with the top of the document panel.\n    // screen_percentage=100 tries to make the bottom of the selection flush with the bottom of the panel.\n    // Anything in between is a linear interpolation between the two.\n    do_recenter_document(stack, screen_percentage_string) {\n        const screen_percentage = parseInt(screen_percentage_string);\n        this.perform_undo_or_redo = 'suppress';\n        \n        // TODO: Accessing the DOM elements directly like this is a hack but there's not an easy\n        // way to get it properly from React here.  May want to restructure things to make this cleaner.\n        let container = document.getElementById('document_container');\n        if(!container) return;\n        const selected_elts = container.getElementsByClassName('selected')\n        if(selected_elts.length === 0) return;\n        const selected_elt = selected_elts[0];\n        const top_scrolltop = selected_elt.offsetTop;\n        const bottom_scrolltop = selected_elt.offsetTop + selected_elt.offsetHeight - container.clientHeight;\n        const ratio = screen_percentage/100;\n        const new_scrolltop = Math.round(top_scrolltop*(1-ratio) + bottom_scrolltop*ratio);\n        container.scrollTop = new_scrolltop;\n    }\n\n    do_scroll_popup_panel(stack, percentage_string) {\n        let panel_elt = document.getElementById('popup_panel');\n        if(!panel_elt) return;\n        const percentage = parseInt(percentage_string || '50') / 100.0;\n        panel_elt.scrollTop += Math.round(panel_elt.clientHeight * percentage);\n    }\n\n    do_export_document_as_text(stack) {\n        const exported_text = this.app_state.document.to_text();\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied document to clipboard\");\n    }\n\n    do_export_stack_top_as_text(stack) {\n        const [new_stack, item] = stack.pop(1);\n        const exported_text = item.to_text();\n        navigator.clipboard.writeText(exported_text);\n        this.notify(\"Copied stack top to clipboard\");\n        return new_stack.push(item)\n    }\n}\n\n\nexport default InputContext;\n\n","\n\nimport './katex.css';  // Must be imported before App.css\nimport './App.css';\n\nimport React from 'react';\n//import ReactDOM from 'react-dom';\nimport katex from 'katex';\nimport {\n    Settings, AppState, UndoStack, DocumentStorage,\n    ImportExportState, FileManagerState\n} from './Models';\nimport InputContext from './Actions';\nimport KeybindingTable from './Keymap';\n\n\nconst $e = React.createElement;\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // NOTE: settings are stored in the localStorage, but documents use indexedDB.\n        // This is mainly because we need the settings before the indexedDB may be ready.\n        let settings = Settings.load_from_local_storage();\n\n        this.state = {\n            app_state: new AppState(),\n            settings: settings,\n            file_manager_state: new FileManagerState(),\n            import_export_state: new ImportExportState(),\n            document_storage: new DocumentStorage(),\n            input_context: new InputContext(this, settings),\n            undo_stack: new UndoStack(),\n            clipboard_item: null\n        };\n        this.state.undo_stack.clear(this.state.app_state);\n        this.state.import_export_state.document_storage = this.state.document_storage;\n        this.state.import_export_state.onstatechange = () => this.import_export_state_changed();\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleBeforeUnload = this.handleBeforeUnload.bind(this);\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n\n        this.state.document_storage.open_database(this.on_open_database.bind(this));\n    }\n\n    // Database has been opened; request the list of documents, and try to load the last-opened file.\n    on_open_database() {\n        this.request_file_list();\n        if(this.state.settings.last_opened_filename)\n            this.start_loading_filename(this.state.settings.last_opened_filename);\n        else {\n            let file_manager_state = this.state.file_manager_state;\n            let settings = this.state.settings;\n            const filename = 'untitled';\n            file_manager_state.current_filename = file_manager_state.selected_filename = filename;\n            settings.last_opened_filename = filename;\n            settings.save();\n        }\n    }\n\n    file_manager_state_changed() {\n        this.setState({file_manager_state: this.state.file_manager_state});\n    }\n\n    import_export_state_changed() {\n        const import_export_state = this.state.import_export_state;\n        this.setState({import_export_state: import_export_state});\n        if(import_export_state.file_list_needs_update) {\n            import_export_state.file_list_needs_update = false;\n            this.request_file_list();\n        }\n    }\n\n    // Start loading the current list of documents from the IndexedDB database.\n    request_file_list() {\n        this.state.document_storage.fetch_file_list(\n            this.file_list_request_finished.bind(this),\n            this.file_list_request_error.bind(this));\n    }\n\n    file_list_request_finished(file_list) {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = false;\n        file_manager_state.file_list = file_list;\n        file_manager_state.sort_file_list('filename', true);\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    file_list_request_error() {\n        let file_manager_state = this.state.file_manager_state;\n        file_manager_state.unavailable = true;\n        this.setState({file_manager_state: file_manager_state});\n    }\n\n    start_loading_filename(filename) {\n        this.state.document_storage.load_state(\n            filename,\n            this.file_load_finished.bind(this),\n            this.file_load_error.bind(this));\n    }\n\n    file_load_finished(filename, new_app_state) {\n        const file_manager_state = this.state.file_manager_state;\n        const settings = this.state.settings;\n        file_manager_state.selected_filename = file_manager_state.current_filename = filename;\n        settings.last_opened_filename = filename;\n        settings.save();\n        this.setState({app_state: new_app_state, file_manager_state: file_manager_state});\n        this.state.undo_stack.clear(new_app_state);\n        this.state.input_context.notify('Loaded: ' + filename);\n    }\n\n    // TODO: It's not necessarily an error if the file doesn't exist,\n    // but we should make sure to clear stack/document in that case\n    // (same as do_start_new_file).\n    file_load_error(filename, error) {\n        //alert(\"Unable to load file \\\"\" + filename + \"\\\".\");\n    }\n\n    componentDidMount() {\n        this.apply_layout_to_dom();\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        window.addEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.addEventListener('pageshow', this.handleVisibilityChange);\n//      window.addEventListener('focus', this.handleVisibilityChange);\n        this.request_file_list();\n    }\n\n    apply_layout_to_dom() {\n        if(this.stack_panel_ref.current && this.document_panel_ref.current &&\n           this.popup_panel_ref.current) {\n            this.state.settings.apply_layout_to_dom(\n                this.stack_panel_ref.current, this.document_panel_ref.current,\n                this.popup_panel_ref.current);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        window.removeEventListener('visibilitychange', this.handleVisibilityChange);\n//      window.removeEventListener('pageshow', this.handleVisibilityChange);\n//      window.removeEventListener('focus', this.handleVisibilityChange);\n    }\n\n    render() {\n        let app_state = this.state.app_state;\n\n        this.stack_panel_ref = React.createRef();\n        this.document_panel_ref = React.createRef();\n        this.popup_panel_ref = React.createRef();\n\n        return $e(\n            'div', {id: 'panel_layout', className: 'theme_' + this.state.settings.selected_theme},\n            $e('div', {className: 'panel stack_panel', id: 'stack_panel', ref: this.stack_panel_ref},\n               $e(ModeIndicatorComponent, {app_state: app_state, input_context: this.state.input_context}),\n               $e(StackItemsComponent, {\n                   settings: this.state.settings,\n                   stack: app_state.stack,\n                   input_context: this.state.input_context\n               })),\n            $e('div', {className: 'panel document_panel', id: 'document_panel', ref: this.document_panel_ref},\n               $e('div', {id: 'document_container'},\n                  $e(DocumentComponent, {\n                      settings: this.state.settings,\n                      document: app_state.document,\n                      filename: this.state.file_manager_state.current_filename,\n                      is_dirty: app_state.is_dirty  /* TODO: revisit, maybe remove this */\n                  }))),\n            $e(PopupPanelComponent, {\n                settings: this.state.settings,\n                popup_panel_ref: this.popup_panel_ref,\n                import_export_state: this.state.import_export_state,\n                document_storage: this.state.document_storage,\n                file_manager_state: this.state.file_manager_state\n            })\n        );\n    }\n\n    handleKeyDown(event) {\n        // No Alt/Meta key combinations are handled.\n        if(event.altKey || event.metaKey)\n            return;\n        const key = this._keyname_from_event(event);\n        let app_state = this.state.app_state;\n        let [was_handled, new_app_state] = this.state.input_context.handle_key(app_state, key);\n        if(was_handled) {\n            event.preventDefault();\n            // TODO: event.stopPropagation();\n            const scratch = this.manage_undo_state(new_app_state);\n            if(scratch)\n                new_app_state = scratch;\n            else   // undo/redo \"failed\"\n                this.state.input_context.error_flash_stack();\n\n            let state_updates = {app_state: new_app_state};\n            if(this.state.input_context.files_changed) {\n                this.request_file_list();\n                state_updates.file_manager_state = this.state.file_manager_state;  // TODO: revisit\n            }\n            this.setState(state_updates);\n        }\n    }\n\n    _keyname_from_event(event) {\n        let key = event.key;\n\n        if((key.startsWith('Arrow') || key === 'Enter' || key === 'Backspace') && event.shiftKey)\n            key = 'Shift+' + key;\n        if(event.ctrlKey)\n            key = 'Ctrl+' + key;\n\n        // NOTE: none of the Alt stuff works on Firefox for some reason.  Chromium seems ok.\n        // if(event.metaKey || event.altKey || event.getModifierState('Alt') || event.getModifierState('Meta'))\n        //     key = 'Alt+' + key;\n\n        return key;\n    }\n\n    // Auto-save when window is being closed.\n    handleBeforeUnload(event) {\n        const filename = this.state.file_manager_state.current_filename;\n        if(filename)\n            this.state.document_storage.save_state(this.state.app_state, filename);\n        return null;\n    }\n\n    // On iOS Safari, this event is triggered when resuming the tab.\n    // When this happens, the scroll positions are reset, but a re-render takes care of that\n    // via DocumentComponent.ensure_selection_visible().\n    handleVisibilityChange(event) {\n        this.setState({});  // force React to re-render\n    }\n\n    // Returns 'new' new_app_state.\n    manage_undo_state(new_app_state) {\n        let undo_stack = this.state.undo_stack;\n        switch(this.state.input_context.perform_undo_or_redo) {\n        case 'undo': return undo_stack.undo_state();\n        case 'redo': return undo_stack.redo_state();\n        case 'suppress': return new_app_state;  // Normal action, but don't remember undo state.\n        case 'clear':\n            undo_stack.clear(new_app_state);\n            return new_app_state;\n        default:\n            // Normal action; save undo state\n            undo_stack.push_state(new_app_state);\n            return new_app_state;\n        }\n    }\n}\n\n\n// Shows current input mode in top-right corner of stack display\nclass ModeIndicatorComponent extends React.Component {\n    render() {\n        let indicator_item = undefined;\n        const notification_text = this.props.input_context.notification_text;\n        if(notification_text) {\n            // Auto-highlight anything after the colon in the notification message.\n            const colon = notification_text.indexOf(':');\n            if(colon >= 0)\n                indicator_item = $e(\n                    'span', {className: 'notification'},\n                    $e('span', {}, notification_text.slice(0, colon+1)),\n                    $e('span', {className: 'highlighted'}, notification_text.slice(colon+1)));\n            else\n                indicator_item = $e('span', {className: 'notification'}, notification_text);\n        }\n        else if(this.props.input_context.mode !== 'base')\n            indicator_item = $e(\n                'span', {className: 'mode'},\n                this.props.input_context.mode.replaceAll('_', ' '));\n        return $e('div', {className: 'indicator'}, indicator_item);\n    }\n}\n\n\nclass StackItemsComponent extends React.Component {\n    render() {\n        let input_context = this.props.input_context;\n        const minieditor_active = input_context.minieditor.active;\n        const minieditor_index = this.props.stack.items.length-1;\n        const item_components = this.props.stack.items.map((item, index) => {\n            if(minieditor_active && index === minieditor_index) {\n                // This is the item currently being edited; display a textarea instead of the item itself.\n                // We need access to the textarea DOM node later (for setting the focus).\n                input_context.minieditor.ref = React.createRef();\n                return $e(\n                    MiniEditorComponent, {\n                        textarea_ref: input_context.minieditor.ref,\n                        input_context: input_context,\n                        key: 'minieditor'\n                    });\n            }\n            else {\n                return $e(\n                    ItemComponent, {\n                        item: item,\n                        selected: false,  // TODO (selecting stack items not implemented yet)\n                        item_ref: React.createRef(),\n                        key: item.react_key(index)\n                    });\n            }\n        });\n        let class_names = ['stack_items'];\n        if(this.props.settings.layout.stack_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')}, item_components);\n    }\n}\n\n\nclass DocumentComponent extends React.Component {\n    render() {\n        const document = this.props.document;\n        const subcomponents = document.items.map((item, index) => {\n            let item_ref = React.createRef();\n            const is_selected = document.selection_index === index+1;\n            if(is_selected) this.selected_item_ref = item_ref;\n            return $e(\n                ItemComponent, {\n                    item: item,\n                    selected: is_selected,\n                    item_ref: item_ref,\n                    key: item.react_key(index)\n                });\n        });\n\n        // \"Spacer\" after the last document item.  This enables the document view to scroll\n        // a little past the end so that we don't force the last document item to be flush\n        // against the bottom of the screen.\n        subcomponents.push(\n            $e('div', {className: 'bottom_spacer', key: 'bottom_spacer'}));\n\n        // Top of document \"spacer\", which is used to indicate that items are to be\n        // inserted at the top of the document.  Unlike the bottom spacer, the top\n        // spacer can be the current document selection.\n        const top_is_selected = document.selection_index === 0;\n        if(top_is_selected)\n            this.selected_item_ref = React.createRef();\n        const top_spacer = $e(\n            'div', {\n                className: 'top_spacer' + (top_is_selected ? ' selected' : ''),\n                key: 'top_spacer',\n                ref: top_is_selected ? this.selected_item_ref : null\n            });\n        \n        let class_names = ['document_items'];\n        if(this.props.settings.layout.document_rightalign_math)\n            class_names.push('rightalign_math');\n        return $e('div', {className: class_names.join(' ')},\n                  [top_spacer].concat(subcomponents));\n    }\n\n    componentDidUpdate() {\n        this.ensure_selection_visible();\n    }\n\n    ensure_selection_visible() {\n        if(!this.selected_item_ref) return;\n        const item = this.selected_item_ref.current;\n        if(!item) return;\n        let container = document.getElementById('document_container');\n        const extra_space = item.offsetHeight/2;\n        if(item.offsetTop < container.scrollTop)\n            container.scrollTop = item.offsetTop - extra_space;\n        if(item.offsetTop + item.offsetHeight > container.scrollTop + container.offsetHeight)\n            container.scrollTop = item.offsetTop + item.offsetHeight - container.offsetHeight + extra_space;\n    }\n}\n\n\nclass MiniEditorComponent extends React.Component {\n    render() {\n        return $e('textarea', {\n            className: 'minieditor',\n            onInput: this.handleOnInput.bind(this),\n            spellCheck: 'false',\n            ref: this.props.textarea_ref\n        });\n    }\n\n    handleOnInput(event) {\n        const content = this.props.textarea_ref.current.value;\n        this.props.input_context.minieditor.text = content;\n    }\n\n    componentDidMount() {\n        let textarea = this.props.textarea_ref.current;\n        const initial_text = this.props.input_context.minieditor.text;\n        if(initial_text) textarea.value = initial_text; \n        textarea.focus();\n    }\n}\n\n\nclass FileManagerComponent extends React.Component {\n    render() {\n        const show_import_export = !this.props.file_manager_state.unavailable;\n        this.file_input_ref = React.createRef();\n        return $e(\n            'div', {className: 'file_header', id: 'files_panel'},\n            $e('h2', {}, 'File Manager'),\n            this.render_file_table(),\n            this.render_shortcuts(),\n            show_import_export && $e('h2', {}, 'Export/Import'),\n            show_import_export && this.render_export_import_section()\n        );\n    }\n\n    render_export_import_section() {\n        const import_export_state = this.props.import_export_state;\n        let subcomponents = [];\n\n        subcomponents.push(\n            $e('p', {}, 'This section lets you download the internal browser document storage as a .zip file, or restore the internal storage from a previously downloaded export.'));\n\n        subcomponents.push(\n            $e('p', {},\n               $e('strong', {}, import_export_state.textual_state())));\n\n        if(import_export_state.state === 'idle')\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {\n                       href: '#',\n                       onClick: this.start_exporting.bind(this)\n                   }, 'Prepare Export')));\n        if(import_export_state.download_available()) {\n            const export_filename = import_export_state.generate_download_filename();\n            subcomponents.push(\n                $e('p', {},\n                   $e('a', {href: import_export_state.download_url, download: export_filename},\n                      'Download: ' + export_filename)));\n        }\n\n        // Show file upload element if ready to accept uploads.\n        if(import_export_state.state === 'idle') {\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {}, 'Import Zip File: '),\n                   $e('input', {\n                       type: 'file',\n                       ref: this.file_input_ref\n                   }),\n                   $e('input', {\n                       type: 'button',\n                       value: 'Upload',\n                       onClick: this.handle_file_upload.bind(this)\n                   })));\n        }\n\n        // Show import results when import finished.\n        if(import_export_state.state === 'idle' && import_export_state.import_result_string)\n            subcomponents.push(\n                $e('p', {},\n                   $e('span', {style: {fontWeight: 'bold'}}, 'Import result: '),\n                   $e('span', {}, import_export_state.import_result_string)));\n        \n        return $e('div', {}, ...subcomponents);\n    }\n\n    render_file_table() {\n        const file_manager_state = this.props.file_manager_state;\n        if(file_manager_state.unavailable)\n            return $e('p', {}, 'IndexedDB support unavailable in your browser.  You will be unable to save or load documents.  Note that Firefox disables IndexedDB when in Private Browsing mode.');\n        else if(file_manager_state.file_list && file_manager_state.file_list.length > 0) {\n            return $e(\n                'div', {},\n                $e('table', {className: 'file_table'},\n                   $e('thead', {},\n                      $e('tr', {},\n                         $e('th', {className: 'filename'}, 'Filename'),\n                         $e('th', {className: 'filesize', colSpan: '2'}, 'Size'),\n                         $e('th', {className: 'timestamp', colSpan: '2'}, 'Last Modified'))),\n                   $e('tbody', {},\n                      file_manager_state.file_list.map(\n                          (file, index) => this._render_file_list_row(file, index)))));\n        }\n        else if(file_manager_state.file_list)\n            return $e('p', {}, 'No files created yet.');\n        else\n            return $e('p', {}, 'Fetching file list...');\n    }\n\n    _render_file_list_row(file, index) {\n        const file_manager_state = this.props.file_manager_state;\n        let class_names = [];\n        if(file.filename === file_manager_state.selected_filename) class_names.push('selected_file');\n        if(file.filename === file_manager_state.current_filename) class_names.push('current_file');\n        const item_count = file.document_item_count + file.stack_item_count;\n        return $e(\n            'tr', {className: class_names.join(' '), key: 'file_' + file.filename},\n            $e('td', {className: 'filename'}, file.filename),\n            $e('td', {className: 'filesize'},\n               Math.floor((file.filesize+1023)/1024) + ' kb'),\n            $e('td', {className: 'filesize'},\n               item_count + ' object' + (item_count === 1 ? '' : 's')),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleDateString()),\n            $e('td', {className: 'timestamp'}, file.timestamp.toLocaleTimeString()));\n    }\n\n    render_shortcuts() {\n        const current_filename = this.props.file_manager_state.current_filename;\n        const help_specs = [\n            ['Escape', 'Close file manager'],\n            ['Arrows', 'Select next/previous file'],\n            ['Enter', 'Open selected file'],\n            ['d', 'Delete selected file'],\n            ['n', 'Start a new empty file'],\n            ['s', 'Save current file' + (current_filename ? (' (' + current_filename + ')') : '')],\n            ['S', 'Save as...']\n        ];\n        const keyhelp_elements = help_specs.map(spec => {\n            const [keyname, helptext] = spec;\n            return $e(\n                'li', {},\n                $e('span', {className: 'keybinding'}, keyname),\n                $e('span', {}, ' ' + helptext));\n        });\n        return $e('ul', {className: 'keybindings'}, ...keyhelp_elements);\n    }\n\n    handle_file_upload(event) {\n        const file_input_elt = this.file_input_ref.current;\n        if(!file_input_elt) return;\n        const file_list = file_input_elt.files;\n        if(file_list.length === 1)\n            this.start_importing(file_list[0]);\n        else if(file_list.length > 1)\n            alert('Please select a single .zip file to import.');\n        else\n            alert('Please select a .zip file to import.');\n    }\n\n    start_importing(file) {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_importing(file);\n    }\n\n    start_exporting() {\n        const import_export_state = this.props.import_export_state;\n        if(import_export_state.state === 'idle')\n            import_export_state.start_exporting();\n    }\n}\n\n\n// Displays an Item instance in any context (stack/document).\n// Props: {item: Item, selected: Bool}\nclass ItemComponent extends React.Component {\n    render() {\n        let item = this.props.item;\n        let ref = this.props.item_ref;\n        const className = this.props.selected ? 'selected ' : '';\n        switch(item.item_type()) {\n        case 'expr':\n            if(item.tag_expr) {\n                this.tag_ref = React.createRef();\n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: 'tag_expr', ref: this.tag_ref}, ''),\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n            }\n            else \n                return $e(\n                    'div', {className: 'expr_item'},\n                    $e('div', {className: className + 'latex_fragment', ref: ref}, ''));\n        case 'markdown':\n            return $e('div', {\n                className: className + 'markdown',\n                dangerouslySetInnerHTML: { __html: item.rendered_html },\n                ref: ref\n            });\n        default:\n            return $e('div', {}, '????');\n        }\n    }\n\n    componentDidMount() {\n        let item = this.props.item;\n        let node = this.props.item_ref.current;\n        if(!node) return;  // shouldn't happen\n        if(item.item_type() === 'expr') {\n            // Render math with KaTeX\n            this._render_with_katex(item.expr.to_latex(), node, true);\n            if(item.tag_expr && this.tag_ref.current)\n                this._render_with_katex(item.tag_expr.to_latex(), this.tag_ref.current, false);\n        }\n        else if(item.item_type() === 'markdown') {\n            // Render <code> elements with KaTeX\n            let children = node.getElementsByTagName('code');\n            for(let i = 0; i < children.length; i++) {\n                let codespan = children[i];\n                const latex_code = codespan.textContent || '';\n                this._render_with_katex(latex_code, codespan, false);\n            }\n        }\n    }\n\n    _render_with_katex(latex_code, node, display_mode) {\n        if(latex_code === '' || latex_code === \"\\\\,\") {\n            // Empty/blank latex expression - fake it with something so that it's visible.\n            latex_code = \"\\\\htmlClass{defer_expr}{\\\\square}\";\n        }\n        try {\n            // NOTE: trust: true here allows the use of \\htmlClass etc.\n            katex.render(\n                latex_code, node,\n                { throwOnError: false, displayMode: display_mode, fleqn: true, trust: true });\n        }\n        catch(e) {\n            // KaTeX throws actual errors for some inputs, even if throwOnError is false.\n            // Example: \\texttt{\\textbf{test}}\n            const msg = e.toString();\n            node.innerHTML = '<div style=\"color:red;\">' + msg + '</div>';\n        }\n    }\n}\n\n\nclass PopupPanelComponent extends React.Component {\n    render() {\n        this.refs = {\n            help: React.createRef(),\n            help_content: React.createRef()\n        };\n        const popup_mode = this.props.settings.popup_mode;\n        let subcomponent = null;\n        if(popup_mode === 'files') {\n            subcomponent = $e(\n                'div', {id: 'files_container'},\n                $e(FileManagerComponent, {\n                    import_export_state: this.props.import_export_state,\n                    document_storage: this.props.document_storage,\n                    file_manager_state: this.props.file_manager_state\n                }));\n        }\n        else if(popup_mode === 'keymap') {\n            subcomponent = $e(\n                'div', {id: 'keymap_container'},\n                $e(KeymapTableComponent, {keymap: KeybindingTable})\n            );\n        }\n        return $e(\n            'div', {id: 'popup_panel', ref: this.props.popup_panel_ref},\n            subcomponent,\n            $e('div', {id: 'help_container', ref: this.refs.help},\n               $e('div', {className: 'help', ref: this.refs.help_content})));\n    }\n\n    componentDidMount() {\n        let help_source_elt = document.getElementById('helptext');\n        let help_dest_elt = this.refs.help_content.current;\n        if(help_source_elt) {\n            help_source_elt.style.display = 'block';\n            this._render_help_latex(help_source_elt);\n            help_source_elt.parentNode.removeChild(help_source_elt);\n            help_dest_elt.appendChild(help_source_elt);\n        }\n    }\n\n    componentDidUpdate() {\n        const mode = this.props.settings.popup_mode;\n        if(this.refs.help.current)\n            this.refs.help.current.style.display = (mode === 'help' ? 'block' : 'none');\n        if(mode === 'help' &&\n           this.props.settings.help_scroll_top !== undefined &&\n           this.props.popup_panel_ref.current) {\n            // Restore helptext scroll position previously saved by 'do_toggle_popup'.\n            this.props.popup_panel_ref.current.scrollTop = this.props.settings.help_scroll_top;\n            this.props.settings.help_scroll_top = undefined;\n        }\n    }\n\n    // Render any <code>...</code> spans in the help text with KaTeX.\n    _render_help_latex(help_elt) {\n        let children = help_elt.getElementsByTagName('code');\n        for(let i = 0; i < children.length; i++) {\n            let code_elt = children[i];\n            const latex_code = code_elt.textContent;\n            if(latex_code)\n                katex.render(latex_code, code_elt,\n                             { throwOnError: false, displayMode: false });\n        }\n    }\n}\n\n\nclass KeymapTableComponent extends React.Component {\n    render() {\n        return $e(\n            'table', {className: 'keymap'},\n            $e('thead', {},\n               $e('tr', {},\n                  $e('th', {className: 'mode'}, 'Mode'),\n                  $e('th', {className: 'keyname'}, 'Key'),\n                  $e('th', {className: 'command'}, 'Command'))),\n            $e('tbody', {}, this.render_rows()));\n    }\n\n    render_rows() {\n        const modes = this.get_sorted_mode_names();\n        const sections = modes.map(mode => this.rows_for_mode(mode));\n        return [].concat(...sections);\n    }\n\n    get_sorted_mode_names() {\n        const keymap = this.props.keymap;\n        let modes = [...Object.keys(keymap)];\n        modes.sort();\n        return modes;\n    }\n\n    rows_for_mode(mode) {\n        const entries = this.props.keymap[mode];\n        let keys = [...Object.keys(entries)];\n        keys.sort();\n        return keys.map(key => this.row_for_mode_and_key(mode, key, entries[key]));\n    }\n\n    row_for_mode_and_key(mode, key, command) {\n        const react_key = mode + '_' + key;\n\n        // If command starts with 'name ...', show the given name in italics instead of the actual command sequence.\n        let command_elt;\n        if(command.startsWith('name ') && command.indexOf(';'))\n            command_elt = $e('em', {}, command.slice(5, command.indexOf(';')));\n        else\n            command_elt = $e('span', {}, command);\n        \n        return $e(\n            'tr', {key: react_key},\n            $e('td', {className: 'mode'}, mode),\n            $e('td', {className: 'keyname'},\n               $e('span', {className: 'keybinding'}, key)),\n            $e('td', {className: 'command'}, command_elt));\n    }\n}\n\n\n// ReactDOM.render(\n//     $e(App, {}),\n//     document.getElementById('root')\n// );\n    \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\n//import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}